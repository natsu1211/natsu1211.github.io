<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EverSummer</title>
  
  <subtitle>no game no life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://natsu1211.com/"/>
  <updated>2019-02-20T17:40:47.475Z</updated>
  <id>https://natsu1211.com/</id>
  
  <author>
    <name>natsu1211</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>读薄Effective Modern C++ (条款23 理解std::move和std::forward)</title>
    <link href="https://natsu1211.com/modern-cpp-23.html"/>
    <id>https://natsu1211.com/modern-cpp-23.html</id>
    <published>2019-02-18T14:33:41.000Z</published>
    <updated>2019-02-20T17:40:47.475Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读薄effective-modern-c-条款23-理解stdmove和stdforward">读薄Effective Modern C++ (条款23 理解std::move和std::forward)</h2><p>移动语义(Move Semantic)，表达的是资源所有权的转移。通过移动语义，使得C++能够通过移动（转移所有权）的方式来构造对象，它的目的是用于避免（某些时候）更为昂贵的拷贝构造。std::move用于帮助实现移动构造。 std::forward则用于实现完美转发(Perfect Forwarding)，使得参数在传递过程中左值或右值的属性(value category)能够得到保持。</p><p>实际上，std::move不移动任何东西，std::forward不转发任何东西，在运行期间，它们什么事情都不会做，不会生成一个字节的可执行代码。它们做的只是类型转换，std::move无条件地把参数转换为右值，而std::forward在只在特定条件下才会执行右值转换。 <a id="more"></a> 一个接近但不完全符合标准的std::move实现如下, <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> remove_reference&lt;T&gt;::type&amp;&amp;</span><br><span class="line">move(T&amp;&amp; param)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> ReturnType = <span class="keyword">typename</span> remove_reference&lt;T&gt;::type&amp;&amp;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;ReturnType&gt;(param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是，std::move也不能保证移动一定会发生，比如一个const的右值就不能被移动。另外真正进行移动的是移动构造函数，而不是std::move。如上所示，std::move所做的仅仅是将参数转换为右值。</p><p>而std::forward的最常见用法是在一个接受通用引用参数的模板函数中，把参数“转发”给另一个函数，</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">const</span> Widget&amp; lvalArg)</span></span>;    <span class="comment">// 处理左值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(Widget&amp;&amp; rvalArg)</span></span>;         <span class="comment">// 处理右值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">logAndProcess</span><span class="params">(T&amp;&amp; param)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">auto</span> now = <span class="built_in">std</span>::chrono::system_clock::now();   <span class="comment">// 获取当前时间</span></span><br><span class="line"></span><br><span class="line">     makeLogEntry(<span class="string">"Calling 'process'"</span>, now);</span><br><span class="line">     process(<span class="built_in">std</span>::forward&lt;T&gt;(param));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>logAndProcess函数的参数param被传递给process函数，而process函数针对左值参数和右值参数进行了重载。当我们用左值调用logAndProcess的时候，我们自然是希望把左值转发给process，而当我们用右值调用logAndProcess时，我们希望调用的是右值重载的process。</p><p>但是param，作为一个右值引用，其本身是个左值。所以每次只有左值重载的process会被调用。为了防止这样的事情，我们需要一项技术，当且仅当初始化param的实参是右值时，才将param转换为右值。这就是std::forward所做的事了，这也是为什么说std::forward是有条件的类型转换。</p><h2 id="总结">总结</h2><ul><li>std::move表现为无条件的右值转换，其自身不会移动任何东西。</li><li>std::forward仅当参数被右值绑定时，才会把参数转换为右值。</li><li>std::move和std::forward在运行时不做任何事情。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;读薄effective-modern-c-条款23-理解stdmove和stdforward&quot;&gt;读薄Effective Modern C++ (条款23 理解std::move和std::forward)&lt;/h2&gt;
&lt;p&gt;移动语义(Move Semantic)，表达的是资源所有权的转移。通过移动语义，使得C++能够通过移动（转移所有权）的方式来构造对象，它的目的是用于避免（某些时候）更为昂贵的拷贝构造。std::move用于帮助实现移动构造。 std::forward则用于实现完美转发(Perfect Forwarding)，使得参数在传递过程中左值或右值的属性(value category)能够得到保持。&lt;/p&gt;
&lt;p&gt;实际上，std::move不移动任何东西，std::forward不转发任何东西，在运行期间，它们什么事情都不会做，不会生成一个字节的可执行代码。它们做的只是类型转换，std::move无条件地把参数转换为右值，而std::forward在只在特定条件下才会执行右值转换。
    
    </summary>
    
      <category term="PL" scheme="https://natsu1211.com/categories/PL/"/>
    
      <category term="Tips" scheme="https://natsu1211.com/categories/PL/Tips/"/>
    
      <category term="Memo" scheme="https://natsu1211.com/categories/Memo/"/>
    
    
      <category term="C++" scheme="https://natsu1211.com/tags/C/"/>
    
      <category term="Move semantic" scheme="https://natsu1211.com/tags/Move-semantic/"/>
    
  </entry>
  
  <entry>
    <title>读薄Effective Modern C++ (条款22 当使用Pimpl Idiom时，在实现文件中定义特殊成员函数)</title>
    <link href="https://natsu1211.com/modern-cpp-22.html"/>
    <id>https://natsu1211.com/modern-cpp-22.html</id>
    <published>2019-02-11T09:29:38.000Z</published>
    <updated>2019-02-11T16:42:51.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="条款22-当使用pimpl-idiom时在实现文件中定义特殊成员函数">条款22 当使用Pimpl Idiom时，在实现文件中定义特殊成员函数</h2><p>如果你曾经尝试过缩短编译时间，你应该熟悉Pimpl(Pointer to implementation) 惯用法。这项技术通过把类中的成员变量替换成指向一个实现类（或结构体）的指针，成员变量被放进单独的实现类中，然后通过该指针间接获取原来的成员变量。 例如，原本的Widget是这样的：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span>      <span class="comment">// 在头文件“widget.h”中</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Widget();</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; data;</span><br><span class="line">    Gadget g1, g2, g3;     <span class="comment">// Gadget是某个用户定义的类型</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因为Widget的成员变量有std::string，std::vector和Gadget，因此widget.h中需要包含std::string,std::vector以及的头文件。<br>使用Pimpl惯用法可以将Widget改写成，</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span>      <span class="comment">// 依然在头文件“widget.h”中</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Widget();</span><br><span class="line">    ~Widget();</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Impl</span>;</span>    <span class="comment">// 声明实现类</span></span><br><span class="line">    Impl *pImpl;    <span class="comment">// 声明指针指向实现类</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><p>因为Widget不再需要知道std::string，std::vector和Gadget的定义，所以Widget的用户不再需要include那些头文件了。那样加快了编译速度，也意味着当这些头文件内容改变时，Widget的用户不会受到影响。<br>一个被声明，却没定义的类型称为不完整类型（incomplete type）。Widget::Impl就是这样的类型，不完整类型能做的事情很少，不过可以声明一个指针指向它们，Pimpl Idiom就是利用了这个特性。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"widget.h"</span>      <span class="comment">// 在实现文件“widget.cpp”</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gadget.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Widget</span>:</span>:Impl &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; data;</span><br><span class="line">    Gadget g1, g2, g3;</span><br><span class="line">&#125;;</span><br><span class="line">Widget::Widget() : pImpl(<span class="keyword">new</span> Impl) &#123;&#125;</span><br><span class="line">Widget::~Widget() &#123; <span class="keyword">delete</span> pImpl; &#125;</span><br></pre></td></tr></table></figure><p>经过前面几个条款的说明，你会发现使用std::unique_ptr来代替原生指针是个更好的选择。 头文件如下，</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span>       <span class="comment">// 在“widget.h”</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Widget();</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Impl</span>;</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Impl&gt; pImpl;   <span class="comment">// 用智能指针代替原生指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>实现文件如下，</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"widget.h"</span>        <span class="comment">// 在“widget.cpp”</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gadget.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Widget</span>:</span>:Impl &#123;       <span class="comment">// 如前</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; data;</span><br><span class="line">    Gadget g1, g2, g3;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Widget::Widget()                           <span class="comment">// 见条款21</span></span><br><span class="line">: pImpl(<span class="built_in">std</span>::make_unique&lt;Impl&gt;())          <span class="comment">// 借助std::make_unique创建</span></span><br><span class="line">&#123;&#125;                                         <span class="comment">// std::unique_ptr</span></span><br></pre></td></tr></table></figure><p>该代码能够编译，但是当用户使用Widget类时就会出现编译错误， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"widget.h"</span></span></span><br><span class="line">Widget w;      <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></p><p>错误信息通常会提示对不完整类型Impl使用了delete，你也许会感到疑惑，毕竟我们根本没有对Impl进行过delete操作。原因在于w被销毁时（例如，离开作用域）所生成的代码，在那个时刻，它的析构函数被调用，而在我们的实现文件中，我们没有声明析构函数。根据编译器生成特殊成员函数的规则（条款17），编译器会为我们隐式生成一个析构函数。在那个析构函数中，Widget成员变量pImpl的析构函数将被调用。pImpl是个std::unique_ptr<widget::impl>对象，即一个使用默认删除器的std::unique_ptr，而std::unique_ptr的默认删除器是对原生指针使用delete。但默认删除器通常先会使用static_assert来确保原生指针不会指向不完整类型。因为编译器生成的Widget的析构函数，和其他所有的特殊成员函数一样，都是隐式内联的，在内联发生的时间点（也就是在头文件中），Impl的定义还不可见，也就是说还是个不完整类型，因此static_assert会失败产生错误信息。<br>解决这个问题的办法也很简单，就是自己为Widget声明析构函数，并在Impl的定义之后定义该析构函数。<br>头文件如下，</widget::impl></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span>            <span class="comment">// 如前，在"widget.h"</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Widget();</span><br><span class="line">    ~Widget();            <span class="comment">// 只是声明</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Impl</span>;</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Impl&gt; pImpl;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>定义文件如下，</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"widget.h"</span>              <span class="comment">// 如前， 在"widget.cpp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gadget.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Widget</span>:</span>:Impl &#123;            <span class="comment">// 如前， 定义Widget::Impl</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; data;</span><br><span class="line">    Gadget g1, g2, g3;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Widget::Widget()         <span class="comment">// 如前</span></span><br><span class="line">: pImpl(<span class="built_in">std</span>::make_unique&lt;Impl&gt;())</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">Widget::~Widget() &#123;&#125;     <span class="comment">// 定义析构函数</span></span><br></pre></td></tr></table></figure><p>不过如果编译器生成的析构函数是正常工作的，可以使用default关键字，</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Widget::~Widget() &#123;&#125;  替换为</span></span><br><span class="line">Widget::~Widget() = <span class="keyword">default</span></span><br></pre></td></tr></table></figure><p>另外，使用Pimpl Idiom的类天生就是支持移动操作的候选人，因此编译器生成的移动操作符合我们的需要：移动类内部的std::unique_ptr。就像条款17所说，声明了Widget析构函数会阻止编译器生成移动操作，所以如果想要支持移动，我们必须声明这些函数，同时也有必要将移动操作的定义移到实现文件中。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span>                <span class="comment">// 仍在“widget.h”</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Widget();</span><br><span class="line">    ~Widget();</span><br><span class="line">    Widget(Widget&amp;&amp; rhs);              <span class="comment">// 只声明</span></span><br><span class="line">    Widget&amp; <span class="keyword">operator</span>=(Widget&amp;&amp; rhs);   <span class="comment">// 只声明</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Impl</span>;</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Impl&gt; pImpl;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"widget.h"</span>            <span class="comment">// 在“widget.cpp”</span></span></span><br><span class="line">...                            <span class="comment">// 如前</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Widget</span>:</span>:Impl &#123; ... &#125;;   <span class="comment">// 如前</span></span><br><span class="line"></span><br><span class="line">Widget::Widget()               <span class="comment">// 如前</span></span><br><span class="line">: pImpl(<span class="built_in">std</span>::make_unique&lt;Impl&gt;())</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">Widget::~Widget() = <span class="keyword">default</span>    <span class="comment">// 如前</span></span><br><span class="line"></span><br><span class="line">Widget::Widget(Widget&amp;&amp; rhs) = <span class="keyword">default</span>;          <span class="comment">// 定义</span></span><br><span class="line">Widget&amp; Widget::<span class="keyword">operator</span>=(Widget&amp;&amp; rhs) = <span class="keyword">default</span>;       <span class="comment">// 定义</span></span><br></pre></td></tr></table></figure><p>为了实现Pimpl Idiom，std::unique_ptr毫无疑问是更好的选择，因为Widget和Widget::Impl之间的关系是独占所有权关系。但是知道使用std::shared_ptr时的举动也是很有必要的。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span>             <span class="comment">// 在“widget.h”</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Widget();</span><br><span class="line">    ...                    <span class="comment">// 不用声明析构函数和移动操作</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Impl</span>;</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Impl&gt; pImpl      <span class="comment">// 用的是std::shared_ptr</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>std::unique_ptr和std::shared_ptr之间行为的不同源于它们对自定义删除器的支持不同。对于std::unique_ptr，删除器的类型是智能指针类型的一部分，这导致当使用编译器生成的特殊成员函数时，指向的类型必须是完整类型。对于std::shared_ptr，删除器的类型不是智能指针类型的一部分，这在运行时会导致更大的数据结构和更慢的代码，但是当使用编译器生成的特殊成员函数时，指向的类型不需要是完整类型。</p><h2 id="总结">总结</h2><ul><li>Pimpl Idiom通过减少类用户和类实现之间的编译依赖来减少编译时间。</li><li>对于类型为std::unique_ptr的pImpl指针，在头文件中声明特殊成员函数，但在实现文件中实现它们，即使使用编译器默认实现（default关键字）时也不例外。</li><li>上一条的建议适用于std::unique_ptr，不适用于std::shared_ptr。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;条款22-当使用pimpl-idiom时在实现文件中定义特殊成员函数&quot;&gt;条款22 当使用Pimpl Idiom时，在实现文件中定义特殊成员函数&lt;/h2&gt;
&lt;p&gt;如果你曾经尝试过缩短编译时间，你应该熟悉Pimpl(Pointer to implementation) 惯用法。这项技术通过把类中的成员变量替换成指向一个实现类（或结构体）的指针，成员变量被放进单独的实现类中，然后通过该指针间接获取原来的成员变量。 例如，原本的Widget是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Widget&lt;/span&gt; &amp;#123;&lt;/span&gt;      &lt;span class=&quot;comment&quot;&gt;// 在头文件“widget.h”中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Widget();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;&amp;gt; data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Gadget g1, g2, g3;     &lt;span class=&quot;comment&quot;&gt;// Gadget是某个用户定义的类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为Widget的成员变量有std::string，std::vector和Gadget，因此widget.h中需要包含std::string,std::vector以及的头文件。&lt;br&gt;
使用Pimpl惯用法可以将Widget改写成，&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Widget&lt;/span&gt; &amp;#123;&lt;/span&gt;      &lt;span class=&quot;comment&quot;&gt;// 依然在头文件“widget.h”中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Widget();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ~Widget();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Impl&lt;/span&gt;;&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;// 声明实现类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Impl *pImpl;    &lt;span class=&quot;comment&quot;&gt;// 声明指针指向实现类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="PL" scheme="https://natsu1211.com/categories/PL/"/>
    
      <category term="Tips" scheme="https://natsu1211.com/categories/PL/Tips/"/>
    
      <category term="Memo" scheme="https://natsu1211.com/categories/Memo/"/>
    
    
      <category term="C++" scheme="https://natsu1211.com/tags/C/"/>
    
      <category term="Smart pointer" scheme="https://natsu1211.com/tags/Smart-pointer/"/>
    
  </entry>
  
  <entry>
    <title>读薄Effective Modern C++ (条款21 比起new，更倾向于使用std::make_unique和std::make_shared)</title>
    <link href="https://natsu1211.com/modern-cpp-21.html"/>
    <id>https://natsu1211.com/modern-cpp-21.html</id>
    <published>2019-02-11T04:56:25.000Z</published>
    <updated>2019-02-11T10:10:52.931Z</updated>
    
    <content type="html"><![CDATA[<h2 id="条款21-比起new更倾向于使用stdmake_unique和stdmake_shared">条款21 比起new，更倾向于使用std::make_unique和std::make_shared</h2><p>std中有三个make函数（std::make_unique, std::make_shared, std::allocate_shared）来帮助我们创建智能指针。它们把任意集合的参数完美转发给动态分配对象的构造函数，然后返回一个指向那对象的智能指针。std::allocate_shared的行为与std::make_shared类似，除了它第一个参数是个分配器，指定动态分配对象的方式。</p><p>对比直接通过new来创建智能指针，make系列函数来创建主要有三点优势。</p><ul><li>更简洁的代码</li><li>能够保证异常安全</li><li>更高的效率</li></ul><a id="more"></a><p>首先，直接使用new来创建智能指针时需要重复写下对象的类型名称，而make函数则只需要写一次。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">auto upw1(std::make_unique&lt;Widget&gt;());  // 使用make函数</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Widget&gt; upw2(<span class="keyword">new</span> Widget);  <span class="comment">// 不使用make函数</span></span><br><span class="line"></span><br><span class="line">auto spw1(std::make_shared&lt;Widget&gt;());  // 使用make函数</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Widget&gt; spw2(<span class="keyword">new</span> Widget);  <span class="comment">// 不使用make函数</span></span><br></pre></td></tr></table></figure></p><p>当然这不足以成为决定性的理由。更加重要的是make系列函数能够保证异常安全， 考虑以下代码，假如我们有个函数，根据优先级来处理Widget：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processWidget</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Widget&gt; spw, <span class="keyword">int</span> priority)</span></span>;</span><br></pre></td></tr></table></figure><p>另外我们有个计算优先级的函数，</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">computePriority</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>然后我们用它和new创建的智能指针作为参数调用processWidget：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">processWidget(<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Widget&gt;(<span class="keyword">new</span> Widget), </span><br><span class="line">              computePriority());    <span class="comment">// 可能会资源泄漏</span></span><br></pre></td></tr></table></figure><p>就如注释所说，这代码中new出来的Widget可能会泄漏，但是为什么？std::shared_ptr是为了防止资源泄漏而设计的，当最后一个指向资源的std::shared_ptr对象消失，它们指向的资源也会被销毁。如果每个人无论什么地方都使用std::shared_ptr，C++还会发生内存泄漏么？</p><p>原因在于，C++标准规定函数的参数在函数运行前必须被求值，所以调用processWidget时，在processWidget开始前执行会发生以下事情：</p><ol type="1"><li>表达式“new Widget”会被求值，一个Widget对象必须在堆上被创建。</li><li>std::shared_ptr的接收原生指针的构造函数一定要执行。</li><li>computePriority一定要执行。</li></ol><p>编译器在生成代码时不会保证上面的执行顺序，“new Widget”一定会在std::shared_ptr构造函数之前执行，因为构造函数需要new的结果，但是computePriority可能在它们之前就被调用了，可能在它们之后，也可能在它们之间。所以，编译器生成代码的执行顺序有可能是这样的：</p><ol type="1"><li>执行“new Widget”。</li><li>执行computePriority。</li><li>执行std::shared_ptr的构造函数。</li></ol><p>如果生成的代码真的是这样，那么在运行时，如果computePriority产生了异常，步骤1中动态分配的Widget就泄漏了，因为它没有被步骤3中的std::shared_ptr保存。</p><p>使用std::make_shared_ptr可以避免这问题。这样调用代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">processWidget(<span class="built_in">std</span>::make_shared&lt;Widget&gt;(), computePriority())</span><br></pre></td></tr></table></figure><p>在运行期间，std::make_shared和computePriority都有可能先被调用，如果先调用的是std::make_shared，那么指向动态分配Widget对象的原生指针会安全地存储在要返回的std::shared_ptr中，然后再调用computePriority。如果computePriority产生异常，std::shared_ptr的析构函数就会销毁持有的Widget。而如果先调用的是computePriority，并且产生异常，std::make_shared就不会被执行，因此没有动态分配的Widget对象需要担心。</p><p>这里的要点在于make函数保证了智能指针的初始化与对象内存的动态分配在同一个表达式中运行。<br>另外，以上的说明对std::unique_ptr和std::make_unique同样适用。</p><p>最后，使用std::make_shared允许编译器生成更小、更快的代码。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Widget&gt; spw(<span class="keyword">new</span> Widget); <span class="comment">//两次内存分配</span></span><br><span class="line"><span class="keyword">auto</span> spw = <span class="built_in">std</span>::make_shared&lt;Widget&gt;();   <span class="comment">//一次内存分配</span></span><br></pre></td></tr></table></figure><p>条款19说明了每个std::shared_ptr内都含有一个指向控制块的指针，这控制块的内存是由std::shared_ptr的构造函数分配的，那么直接使用new，需要为Widget分配一次内存，还需要为控制块分配一次内存。而使用std::make_shared的时候，会分配一大块内存来同时持有Widget对象和控制块。这种优化减少了程序的静态尺寸，因为代码只需要调用一次内存分配函数，然后它增加了代码执行的速度。这个优势同样存在于std::allocate_shared。</p><p>但是，make系列函数也有他们自身的限制。</p><ol type="1"><li>不可以指定自定义删除器</li><li>make函数内，完美转发使用的是圆括号。</li></ol><p>这两种情况下应当直接使用各个智能指针的构造函数。</p><p>对于1，如果需要使用自定义删除器，又想要防止容易发生的异常安全问题。最好的办法就是确保当你直接使用new时，用一条语句执行——把new的结果马上传递给智能指针的构造函数，并且该语句就做这一件事。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processWidget</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Widget&gt; spw, <span class="keyword">int</span> priority)</span></span>; <span class="comment">// 如前</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cusDel</span><span class="params">(Widget *ptr)</span></span>;      <span class="comment">//  自定义删除器</span></span><br><span class="line"></span><br><span class="line">processWidget(                 <span class="comment">// 如前，资源可能泄漏</span></span><br><span class="line">   <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Widget&gt;(<span class="keyword">new</span> Widget, cusDel),</span><br><span class="line">   computePriority()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Widget&gt; spw(<span class="keyword">new</span> Widget, cusDel);</span><br><span class="line">processWidget(spw, computeWidget);  <span class="comment">// 正确，但不是最佳，因为spw是个左值，会进行拷贝构造</span></span><br><span class="line"></span><br><span class="line">processWidget(<span class="built_in">std</span>::move(spw), computePriority());  <span class="comment">// 将spw转换为右值，得到与非异常安全版本一样的效率。因为对于std::shared_ptr来说，移动构造不需要像拷贝构造一样进行昂贵的引用计数增加操作。</span></span><br></pre></td></tr></table></figure><p>对于2，可以借助auto来进行类型推导，从而创建一个std::initializer_list，</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 std::initializer_list</span></span><br><span class="line"><span class="keyword">auto</span> initList = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用std::initializer_list创建std::vector，容器中只有两个元素</span></span><br><span class="line"><span class="keyword">auto</span> spv = <span class="built_in">std</span>::make_shared&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;(initList);</span><br></pre></td></tr></table></figure><p>对于std::make_unique来说，上面就是故事的全部了，但是对于std::make_shared来说，还有一些边缘情况值得知道。</p><ol start="3" type="1"><li>一些类重定义了自己的new和delete操作符函数，这些函数的出现暗示着常规的全局内存分配和回收不适合这种类型的对象。通常情况下，设计这些函数只有为了精确分配和销毁对象，例如，Widget对象的new和delete操作符是为了精确分配和回收大小为sizeof(Widget)的内存块设计的。这两个函数不适合std::shared_ptr的自定义分配（借助std::allocate_shared）和回收（借助自定义删除器），因为std::allocate_shared请求内存的大小不是对象的尺寸，而是对象尺寸加上控制块尺寸。所以，使用make函数为那些自定义了new和delete操作符的类创建对象通常是个糟糕的想法。</li><li>正如之前提到的，std::make_shared所创建的std::shared_ptr的控制块与它管理的对象放在同一块内存。当引用计数为0时，对象被销毁，但是，它使用的内存不会释放，除非控制块也被销毁。但是，只要有std::weak_ptr指向控制块（weak count大于0），控制块就必须继续存在，而只要控制块存在，容纳它的内存快也就不能被释放。也就是说，通过make函数创建对象所分配的内存，要直到最后一个指向它的std::shared_ptr和std::weak_ptr对象销毁，才能被回收。如果对象的类型非常大，并且最后一个std::shared_ptr销毁和最后一个std::weak_ptr销毁之间的时间间隔很大，那么是对象销毁和内存被回收之间的会有延迟，这在某些内存紧张的系统上可能会造成问题。而直接使用new来创建智能指针就不会有这种问题，因为控制块的内存和对象自身的内存是分开的。</li></ol><h2 id="总结">总结</h2><ul><li>相比于直接使用new，make函数更加简洁，更加异常安全，而且std::make_shared和std::allocate_shared生成的代码更小更快。</li><li>不适合使用make函数的场合包括需要指定自定义删除器和想要传递大括号初始值。</li><li>对于std::shared_ptr，使用make函数可能是不明智的额外场合包括<ul><li>自定义内存管理函数的类</li><li>内存紧张的系统中，对象非常大，并且std::weak_ptr生命周期长于std::shared_ptr。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;条款21-比起new更倾向于使用stdmake_unique和stdmake_shared&quot;&gt;条款21 比起new，更倾向于使用std::make_unique和std::make_shared&lt;/h2&gt;
&lt;p&gt;std中有三个make函数（std::make_unique, std::make_shared, std::allocate_shared）来帮助我们创建智能指针。它们把任意集合的参数完美转发给动态分配对象的构造函数，然后返回一个指向那对象的智能指针。std::allocate_shared的行为与std::make_shared类似，除了它第一个参数是个分配器，指定动态分配对象的方式。&lt;/p&gt;
&lt;p&gt;对比直接通过new来创建智能指针，make系列函数来创建主要有三点优势。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更简洁的代码&lt;/li&gt;
&lt;li&gt;能够保证异常安全&lt;/li&gt;
&lt;li&gt;更高的效率&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="PL" scheme="https://natsu1211.com/categories/PL/"/>
    
      <category term="Tips" scheme="https://natsu1211.com/categories/PL/Tips/"/>
    
      <category term="Memo" scheme="https://natsu1211.com/categories/Memo/"/>
    
    
      <category term="C++" scheme="https://natsu1211.com/tags/C/"/>
    
      <category term="Smart pointer" scheme="https://natsu1211.com/tags/Smart-pointer/"/>
    
  </entry>
  
  <entry>
    <title>读薄Effective Modern C++ (条款20 用std::shared_ptr管理共享所有权的资源)</title>
    <link href="https://natsu1211.com/modern-cpp-20.html"/>
    <id>https://natsu1211.com/modern-cpp-20.html</id>
    <published>2019-02-02T08:55:24.000Z</published>
    <updated>2019-02-11T10:10:47.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="条款20-把stdweak_ptr当作类似stdshared_ptr的可空悬指针使用">条款20 把std::weak_ptr当作类似std::shared_ptr的可空悬指针使用</h2><p>std::weak_ptr是用于表示弱引用的智能指针。std::weak_ptr不是一个单独使用的智能指针，它要和std::shared_ptr搭配使用。std::weak_ptr不能被解引用，也不能检测是否为空。</p><p>std::weak_ptr通常是由std::shared_ptr创建而来， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> spw = <span class="built_in">std</span>::make_shared&lt;Widget&gt;();  <span class="comment">// spw是std::shared_ptr&lt;Widget&gt;</span></span><br><span class="line">                                        <span class="comment">// 引用计数为1</span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">std</span>::weak_ptr&lt;Widget&gt; wpw(spw);         <span class="comment">// wpw指向spw指向的Widget，引用计数仍然为1</span></span><br><span class="line">...</span><br><span class="line">spw = <span class="literal">nullptr</span>;                          <span class="comment">// 引用计数变成0，Widget被销毁，wpw现在变成空悬指针</span></span><br></pre></td></tr></table></figure></p><p>空悬的std::weak_ptr被称作是已经过期（expired）的，你可以直接检查它，<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (wpw.expired()) ... <span class="comment">// 如果wpw指向的不是一个对象</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>不过一般状况是，你去检查std::weak_ptr是否过期，如果没有过期（即不是空悬），就要取得它指向的对象。但是这件事要比想象的困难，因为std::weak_ptr没有解引用操作，所以没有办法写出解引用的代码。就算有这个操作，单独的检查操作和解引用操作会引出一个竞争条件：在调用检查操作和解引用操作之间，另一个线程可能正在重赋值或销毁最后一个指向对象的std::shared_ptr，因此导致对象被销毁，这样解引用会产生未定义行为。</p><p>我们需要的是一个原子操作，检查std::shared_ptr是否过期，没有的话，获得它指向的对象。 你以通过lock函数或是接受std::weak_ptr为参数的std::shared_ptr构造函数来做这件事。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Widget&gt; spw1 = wpw.lock();  <span class="comment">// 如果wpw过期了，spw1为空</span></span><br><span class="line"><span class="keyword">auto</span> spw2 = wpw.lock();                     <span class="comment">// 效果和上面相同， 不过使用了auto</span></span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Widget&gt; spw3(wpw);          <span class="comment">// 如果wpw过期，抛出std::bad_weak_ptr</span></span><br></pre></td></tr></table></figure><p>std::weak_ptr的用途主要有，</p><ul><li>用于实现观察者模式。在多数实现中，每个Subject（主题）包含指向Observer(观察者)指针作为成员变量，这让主题在状态改变时很容易通知观察者。主题没有兴趣控制观察者的生命期，但是应当确保如果观察者被销毁，随后主题不会试图使用它。一个合理的设计是让每个主题持有一个元素为std::weak_ptr的容器，std::weak_ptr指向主题的每个观察者，因此主题在使用观察者之前可以查看其是否已经被销毁。</li><li>用于避免循环引用。不过，值得注意的是需要用std::weak_ptr回避循环引用的情况并不常见。在严格分层的数据结构，例如树中，子结点通常只属于父结点，当父结点被销毁，它的子结点也会被销毁。因此通常情况下，父结点指向子结点的指针最好是std::unique_ptr，而子结点指向父结点的指针可以用原生指针安全实现，因为子结点的生命期决不会比父结点长，所以不必担心原生指针会空悬。</li></ul><p>最后，从效率的角度来看，std::weak_ptr的开销和std::shared_ptr差不多。std::weak_ptr对象的大小与std::shared_ptr对象相同，它们使用者与shared_ptr的一样的控制块（看条款19），也带有涉及引用计数操作的构造函数、析构函数、赋值操作。std::weak_ptr管理的是弱引用计数，详细细节看条款21。</p><h2 id="总结">总结</h2><ul><li>把std::weak_ptr当作类似std::shared_ptr的、可空悬的指针使用</li><li>std::weak_ptr的潜在用途包含缓存，观察者链表，防止std::shared_ptr循环</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;条款20-把stdweak_ptr当作类似stdshared_ptr的可空悬指针使用&quot;&gt;条款20 把std::weak_ptr当作类似std::shared_ptr的可空悬指针使用&lt;/h2&gt;
&lt;p&gt;std::weak_ptr是用于表示弱引用的智能指针。std::weak_ptr不是一个单独使用的智能指针，它要和std::shared_ptr搭配使用。std::weak_ptr不能被解引用，也不能检测是否为空。&lt;/p&gt;
&lt;p&gt;std::weak_ptr通常是由std::shared_ptr创建而来， &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; spw = &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::make_shared&amp;lt;Widget&amp;gt;();  &lt;span class=&quot;comment&quot;&gt;// spw是std::shared_ptr&amp;lt;Widget&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        &lt;span class=&quot;comment&quot;&gt;// 引用计数为1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::weak_ptr&amp;lt;Widget&amp;gt; wpw(spw);         &lt;span class=&quot;comment&quot;&gt;// wpw指向spw指向的Widget，引用计数仍然为1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spw = &lt;span class=&quot;literal&quot;&gt;nullptr&lt;/span&gt;;                          &lt;span class=&quot;comment&quot;&gt;// 引用计数变成0，Widget被销毁，wpw现在变成空悬指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;空悬的std::weak_ptr被称作是已经过期（expired）的，你可以直接检查它，&lt;br&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (wpw.expired()) ... &lt;span class=&quot;comment&quot;&gt;// 如果wpw指向的不是一个对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PL" scheme="https://natsu1211.com/categories/PL/"/>
    
      <category term="Tips" scheme="https://natsu1211.com/categories/PL/Tips/"/>
    
      <category term="Memo" scheme="https://natsu1211.com/categories/Memo/"/>
    
    
      <category term="C++" scheme="https://natsu1211.com/tags/C/"/>
    
      <category term="Smart pointer" scheme="https://natsu1211.com/tags/Smart-pointer/"/>
    
  </entry>
  
  <entry>
    <title>读薄Effective Modern C++ (条款19 用std::shared_ptr管理共享所有权的资源)</title>
    <link href="https://natsu1211.com/modern-cpp-19.html"/>
    <id>https://natsu1211.com/modern-cpp-19.html</id>
    <published>2019-01-26T16:03:55.000Z</published>
    <updated>2019-02-11T10:10:39.282Z</updated>
    
    <content type="html"><![CDATA[<h2 id="条款19-用stdshared_ptr管理共享所有权的资源">条款19 用std::shared_ptr管理共享所有权的资源</h2><p>正如其名, std::shared_ptr用于表达共享所有权语义，也就是说，可以有多个std::shared_ptr指向同一个对象，并且保证在没有std::shared_ptr指向该对象时，对象被正确的释放。</p><p>那么如何知道不再有任何std::shared_ptr指向某个对象/资源呢？答案是引用计数。std::shared_ptr内部除了包含原生指针，还包含一个控制块（的指针），该控制块（一个struct）里有一个整数字段，用于记录有多少std::shared同时指向该对象。<br>std::shared_ptr的非移动构造函数会增加这个计数，拷贝和赋值运算也会。（如果shared_ptr对象sp1和sp2指向不同的对象，那么赋值语句“sp1 = sp2”会导致sp1指向sp2指向的对象。赋值语句还会导致sp1原来指向的对象的引用计数减1，sp2指向的对象的引用计数加1。）如果一个std::shared_ptr在操作引用计数后发现引用计数为0，意味着没有其他的std::shared_ptr指向该资源，便释放资源。 <a id="more"></a></p><p>上面的说明包含了以下信息：</p><ul><li>std::shared_ptr的大小通常是原生指针的两倍，因为它包含一个指向资源的原生指针，还有资源的引用计数。引用计数所用的内存一定是动态分配的。因为，但是指向的对象对引用计数一无所知，它们也没有存储引用计数的地方。</li><li>增加和减少引用计数一定是原子操作，因为在不同的线程中会同时存在读和写。例如，在一个线程中，std::shared_ptr正在析构（会减少引用计数），同时在另一个线程，指向相同资源的std::shared_ptr正在被拷贝（会增加引用计数）。原子操作通常会比非原子操作慢，所以尽管引用计数通常只占据一个word的大小，也应该认为读写引用计数是比较昂贵的。</li></ul><p>类似于std::unique_ptr，std::shared_ptr使用delete作为默认的释放资源手段，但它也支持自定义删除器。但是，不同于std::unique_ptr，自定义删除器的类型不是std::shared_ptr类型的一部分，</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> loggingDel = [](Widget *pw)</span><br><span class="line">                  &#123;</span><br><span class="line">                      makeLogEntry(pw);</span><br><span class="line">                      <span class="keyword">delete</span> pw;</span><br><span class="line">                  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Widget, <span class="keyword">decltype</span>(loggingDel)&gt;            <span class="comment">// 删除器的类型是</span></span><br><span class="line">                     upw(<span class="keyword">new</span> Widget, loggingDel);        <span class="comment">// 指针类型的一部分</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Widget&gt;              <span class="comment">// 删除器的类型不是指针类型的一部分</span></span><br><span class="line">            spw(<span class="keyword">new</span> Wiget, loggingDel);</span><br></pre></td></tr></table></figure><p>这意味着持有不同类型自定义删除器的std::shared_ptr也可以放进同一个容器里。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> customDelete1 = [](Widget *pw) &#123; ... &#125;;   <span class="comment">// 自定义删除器</span></span><br><span class="line"><span class="keyword">auto</span> customDelete2 = [](Widget *pw) &#123; ... &#125;;   <span class="comment">// 两个类型不同</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Widget&gt; pw1(<span class="keyword">new</span> Widget, customDelete1);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Widget&gt; pw2(<span class="keyword">new</span> Widget, customDelete2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Widget&gt;&gt; vpw&#123; pw1, pw2 &#125;;</span><br></pre></td></tr></table></figure></p><p>还有一个和std::unique_ptr不同，指定自定义删除器不会改变std::shared_ptr对象的大小。不管使用怎样的删除器，一个std::shared_ptr对象的大小都是两个原生指针。它的内存模型如下图所示， <img src="https://raw.githubusercontent.com/natsu1211/pics/master/shard_ptr.jpg"></p><p>不是类型的一部分的原因也在这，因为在控制块是保存在堆上的，std::shared_ptr只是持有该控制块的指针。</p><p>通常情况下，创建std::shared_ptr的函数不可能知道是否已经有其它的std::shared_ptr指向该对象，所以控制块创建要服从以下规则：</p><ul><li>std::make_shared（条款21）总是会创建控制块。它是加工一个刚new出来的对象，所以这个对象一定不会有控制块。</li><li>当std::shared_ptr由独占所有权指针构造时，因为独占所有权的指针不会使用控制块，控制块需要被创建。</li><li>当以原生指针为参数调用std::shared_ptr的构造函数时，也会创建控制块。</li></ul><p>这样的规则会导致一个问题：由单一的原生指针构造std::shared_ptr构造多次会导致未定义行为，因为指向的对象会有多个控制块。多个控制块意味着多个引用计数，多个引用计数意味着多次被销毁。所以，</p><ul><li>构造std::shared_ptr时应当尽量使用std::make_shared</li><li>需要自定义删除器而无法使用std::make_shared时,也应当在初始化shared_ptr时直接使用new出来的对象，如<code>std::shared_ptr&lt;Widget&gt; spw1(new Widget， loggingDel);</code>，这样可以避免原生指针被多次初始化。</li></ul><p>std::shared_ptr涉及到动态分配的控制块、任意大的删除器和删除器的内存分配、虚函数的开销、但鉴于它提供的功能，std::shared_ptr要求的开销是情有可原的。典型情况下，std::shared_ptr是通过std::make_shared创建的，使用的是默认的删除器和默认的分配器，控制块的大小只有两到三个字（word），然后动态分配的开销基本没有（具体细节看条款21）。解引用一个std::shared_ptr的开销不比解引用原生指针大，操作引用计数涉及到一或两个原子操作，这些操作通常会转化为一条机器指令，所以尽管它们可能比非原子指令开销大，但是它们依旧是单一机器指令。通常情况下，管理对象的std::shared_ptr只用一次控制块里的虚函数操作，那便是当对象被销毁时。</p><p>作为这些适量开销的交换，我们得到了动态分配资源的自动生命期管理。如果共享所有权不是必须的，那么std::unique_ptr为更好的选择。</p><h2 id="总结">总结</h2><ul><li>std::shared_ptr提供了一种方便的管理共享生命周期的资源的方法。</li><li>与std::unique_ptr相比，std::shared_ptr对象通常是它的两倍大，需要控制块和原子操作的引用计数。</li><li>默认销毁资源的方式是delete，但支持自定义删除器。删除器的类型不影响std::shared_ptr的类型。</li><li>避免用原生指针变量来创建std::shared_ptr。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;条款19-用stdshared_ptr管理共享所有权的资源&quot;&gt;条款19 用std::shared_ptr管理共享所有权的资源&lt;/h2&gt;
&lt;p&gt;正如其名, std::shared_ptr用于表达共享所有权语义，也就是说，可以有多个std::shared_ptr指向同一个对象，并且保证在没有std::shared_ptr指向该对象时，对象被正确的释放。&lt;/p&gt;
&lt;p&gt;那么如何知道不再有任何std::shared_ptr指向某个对象/资源呢？答案是引用计数。std::shared_ptr内部除了包含原生指针，还包含一个控制块（的指针），该控制块（一个struct）里有一个整数字段，用于记录有多少std::shared同时指向该对象。&lt;br&gt;
std::shared_ptr的非移动构造函数会增加这个计数，拷贝和赋值运算也会。（如果shared_ptr对象sp1和sp2指向不同的对象，那么赋值语句“sp1 = sp2”会导致sp1指向sp2指向的对象。赋值语句还会导致sp1原来指向的对象的引用计数减1，sp2指向的对象的引用计数加1。）如果一个std::shared_ptr在操作引用计数后发现引用计数为0，意味着没有其他的std::shared_ptr指向该资源，便释放资源。
    
    </summary>
    
      <category term="PL" scheme="https://natsu1211.com/categories/PL/"/>
    
      <category term="Tips" scheme="https://natsu1211.com/categories/PL/Tips/"/>
    
      <category term="Memo" scheme="https://natsu1211.com/categories/Memo/"/>
    
    
      <category term="C++" scheme="https://natsu1211.com/tags/C/"/>
    
      <category term="Smart pointer" scheme="https://natsu1211.com/tags/Smart-pointer/"/>
    
  </entry>
  
  <entry>
    <title>读薄Effective Modern C++ (条款18 用std::unique_ptr管理独占所有权的资源)</title>
    <link href="https://natsu1211.com/modern-cpp-18.html"/>
    <id>https://natsu1211.com/modern-cpp-18.html</id>
    <published>2019-01-15T17:19:57.000Z</published>
    <updated>2019-02-11T10:10:33.660Z</updated>
    
    <content type="html"><![CDATA[<h2 id="条款18-用stdunique_ptr管理独占所有权的资源">条款18 用std::unique_ptr管理独占所有权的资源</h2><p>指针是强大的，然而原生指针也有着一些的缺点。</p><ul><li>难以知道一个原生指针指向的是单个对象还是一个对象数组，所以也难以正确选择delete还是delete[]来释放内存。</li><li>原生指针无法表达所有权（你是否应该负责释放该指针指向的对象）</li><li>难以确保所有路径上delete都被正确调用，也就难以确保异常安全</li><li>无法知道指针是否已经空悬</li></ul><p>由于C++缺乏垃圾回收机制，用原生指针来管理内存又是如此的容易出错，C++11添加了一系列的智能指针(std::unique_ptr, std::shared_prt, std::weak_ptr)，用来解决原生指针的种种问题，简化内存管理。</p><p>std::unique_ptr用来表示独占所有权语义。所谓独占，意味着一个非空的std::unique_ptr会一直拥有它指向的对象。你无法拷贝一个std::unique_ptr, 而只能移动它。当移动一个std::unique_ptr，所有权会从源指针转移到目标指针（源指针的内容浅拷贝到目标指针，之后源指针置为null）。<br><a id="more"></a></p><p>std::unique_ptr的一个常见使用是作为工厂函数的返回类型。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Ts&gt;        <span class="comment">// 返回一个由给定参数</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Investment&gt;     <span class="comment">// 创建的对象的指针</span></span><br><span class="line">makeInvestment(Ts&amp;&amp;... params);</span><br></pre></td></tr></table></figure></p><p>调用者可以在一个局部作用域使用返回的std::unique_ptr, <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&#123;                  </span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">auto</span> pInvestment =                      <span class="comment">// pInvestment的类型是</span></span><br><span class="line">          makeInvestment(*arguments*);       <span class="comment">// std::unique_ptr&lt;Investment&gt;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;    <span class="comment">// 销毁 *pInvestment</span></span><br></pre></td></tr></table></figure></p><p>std::unique_ptr用于移动语境也是没有问题的，比如用一个容器来接受工厂返回的std::unique_ptr,此时资源的所有权会最终转移到对象内部，最终随着对象声明周期结束而被释放。</p><p>默认情况下，资源销毁是通过对std::unique_ptr内的原生指针使用delete来完成的。也能够自定义删除器(deleter),</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Ts&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">makeInvestment</span><span class="params">(Ts&amp;&amp;... params)</span>   <span class="comment">// C++14</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">auto</span> delInvmt = [](Investment* pInvestment) <span class="comment">// 自定义删除器</span></span><br><span class="line">                   &#123;                           <span class="comment">// 内置于makeInvestment</span></span><br><span class="line">                       makeLogEntry(pInvestment);</span><br><span class="line">                       <span class="keyword">delete</span> pInvestment;</span><br><span class="line">                   &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Investment, <span class="keyword">decltype</span>(delInvmt)&gt; pInv(<span class="literal">nullptr</span>, delInvmt); </span><br><span class="line">    <span class="keyword">if</span> (...)</span><br><span class="line">    &#123;</span><br><span class="line">        pInv.reset(<span class="keyword">new</span> Stock(<span class="built_in">std</span>::forward&lt;Ts&gt;(params)...));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (...)</span><br><span class="line">    &#123;</span><br><span class="line">        pInv.reset(<span class="keyword">new</span> Bond(<span class="built_in">std</span>::forward&lt;Ts&gt;(params)...));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (...)</span><br><span class="line">    &#123;</span><br><span class="line">        pInv.reset(<span class="keyword">new</span> RealEstate(<span class="built_in">std</span>::forward&lt;Ts&gt;(params)...));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pInv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>delInvmt是从makeInvestment工厂函数返回对象的自定义删除器。所有的自定义删除器都必须有一个指向需要销毁的对象的原生指针作为参数，然后它做的事情是销毁对象的必要工作。在这个例子中，删除器的行为是调用makelogEntry，然后在进行delete。</li><li>当我们使用自定义的删除器的时候，它的类型要作为std::unique_ptr的第二个模板参数。这也是为什么pInv的类型是std::unique_ptr&lt;Investment, decltype(delInvmt)&gt;。</li><li>试图将原生指针赋值给std::unique_ptr无法通过编译，因为C++11禁止从原生指针到智能指针的隐式转换。那就是为什么reset被用来让pInvmt得到new出来的对象的所有权。</li><li>当你使用默认删除器时（即delete），std::unique_ptr对象的大小和原生指针一样。如果使用自动定义删除器，就不是这样了。如果删除器是函数指针，它通常会让std::unique_ptr的大小增加一到两个字(word)。如果删除器是函数对象，std::unique_ptr的大小改变取决于函数对象存储了多少状态。无状态的函数对象不会受到一丝代价，这意味着当自定义删除器可用函数实现也可用不捕获变量的lambda表达式实现时，lambda实现会更好。</li></ul><p>std::unique_ptr的另一个常用的地方是在于实现Pimpl Idiom。条款22会专门介绍。</p><p>在C++11中，std::unique_ptr是表达独占所有权的方式，但它最吸引人的一个特性是它能即简单又高效地转化为std::shared_ptr <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Investment&gt; sp =    <span class="comment">// 把 std::unique_ptr转换为</span></span><br><span class="line">    makeInvestment(argument);       <span class="comment">// std::shared_ptr</span></span><br></pre></td></tr></table></figure></p><p>这就是为什么std::unique_ptr如此适合做工厂函数的关键原因，工厂函数不会知道独占所有权语义和共享所有权语义哪个更适合调用者。通过返回一个std::unique_ptr，工厂提供给调用者的是最高效的智能指针，但它不妨碍调用者用std::shared_ptr来替换它。</p><h2 id="总结">总结</h2><ul><li>std::unique_ptr是一个轻量并且只可移动的智能指针，它表达资源的独占权。</li><li>默认情况下，std::unique_ptr通过delete来销毁资源，但可以指定自定义删除器。有状态的删除器和函数指针作为std::unique_ptr的删除器会增加std::unique_ptr对象的大小。</li><li>将std::unique_ptr转换为std::shared_ptr是容易的。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;条款18-用stdunique_ptr管理独占所有权的资源&quot;&gt;条款18 用std::unique_ptr管理独占所有权的资源&lt;/h2&gt;
&lt;p&gt;指针是强大的，然而原生指针也有着一些的缺点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;难以知道一个原生指针指向的是单个对象还是一个对象数组，所以也难以正确选择delete还是delete[]来释放内存。&lt;/li&gt;
&lt;li&gt;原生指针无法表达所有权（你是否应该负责释放该指针指向的对象）&lt;/li&gt;
&lt;li&gt;难以确保所有路径上delete都被正确调用，也就难以确保异常安全&lt;/li&gt;
&lt;li&gt;无法知道指针是否已经空悬&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于C++缺乏垃圾回收机制，用原生指针来管理内存又是如此的容易出错，C++11添加了一系列的智能指针(std::unique_ptr, std::shared_prt, std::weak_ptr)，用来解决原生指针的种种问题，简化内存管理。&lt;/p&gt;
&lt;p&gt;std::unique_ptr用来表示独占所有权语义。所谓独占，意味着一个非空的std::unique_ptr会一直拥有它指向的对象。你无法拷贝一个std::unique_ptr, 而只能移动它。当移动一个std::unique_ptr，所有权会从源指针转移到目标指针（源指针的内容浅拷贝到目标指针，之后源指针置为null）。&lt;br&gt;
    
    </summary>
    
      <category term="PL" scheme="https://natsu1211.com/categories/PL/"/>
    
      <category term="Tips" scheme="https://natsu1211.com/categories/PL/Tips/"/>
    
      <category term="Memo" scheme="https://natsu1211.com/categories/Memo/"/>
    
    
      <category term="C++" scheme="https://natsu1211.com/tags/C/"/>
    
      <category term="Smart pointer" scheme="https://natsu1211.com/tags/Smart-pointer/"/>
    
  </entry>
  
  <entry>
    <title>读薄Effective Modern C++ (条款17 理解特殊成员函数的生成)</title>
    <link href="https://natsu1211.com/modern-cpp-17.html"/>
    <id>https://natsu1211.com/modern-cpp-17.html</id>
    <published>2019-01-12T09:31:53.000Z</published>
    <updated>2019-02-11T10:10:27.797Z</updated>
    
    <content type="html"><![CDATA[<h2 id="条款17-理解特殊成员函数的生成">条款17 理解特殊成员函数的生成</h2><p>正如大家所知，C++编译器会在特定条件下为类生成特殊的成员函数。C++98中有4种隐式生成的特殊成员函数，构造函数(constuctor)，析构函数(destructor)，拷贝构造函数(copy constructor)，拷贝赋值运算符(copy assignment operator)，从C++11开始又新增了移动构造函数(move constructor)，移动赋值运算符(move assignment operator)。<br>他们的生成规则可用下图概括,</p><p><img src="https://raw.githubusercontent.com/natsu1211/pics/master/cpp%20implicit%20functions.jpg"></p><a id="more"></a><p>简单概括，</p><ul><li>默认构造函数：类中没有用户声明的构造函数时才会生成。</li><li>析构函数：类中没有用户声明的析构函数时才会生成。和C++98的规则的唯一的区别就是析构函数默认声明为noexcept（看条款14）。C++98的规则是基类的析构函数的虚函数的话，生成的析构函数也是虚函数。</li><li>拷贝构造函数：只有在类中缺乏用户声明的拷贝构造时才会生成。如果类中声明了移动操作，拷贝构造会被删除(delete)。当类中存在用户声明的拷贝赋值操作符或析构函数时，建议用户同时自己定义拷贝构造函数。</li><li>拷贝赋值运算符：只有在类中缺乏用户声明的拷贝赋值运算符时才会生成。如果类中声明了移动操作，拷贝赋值运算符会被删除。当类中存在用户声明的拷贝构造函数或析构函数时，建议用户同时自己定义拷贝赋值运算符。</li><li>移动构造函数和移动赋值运算符：只有在类中没有用户声明的拷贝操作、移动操作、析构函数时才会自动生成。</li></ul><p>需要注意的是，移动构造函数和移动赋值运算符不会抑制互相的生成。这是C++98的标准，C++11为了保证代码的兼容性同样保持了这一点。而移动构造函数和移动赋值运算符则会，这是符合直觉的。类似的，当用户定义了析构函数的时候，拷贝构造函数/拷贝赋值运算符依然可能被隐式声明，而移动版本则不能。然而生成的拷贝构造函数/拷贝赋值运算符的行为很有可能是不符合我们要求的，所以即使编译器能够为我们声明，我们也应当尽量的显式声明（也就是图中标红，需要注意的坑）。</p><p>自动生成的拷贝构造函数与移动构造函数所做的事很简单，比如析构函数只是简单的对指针类型的成员进行delete，默认拷贝构造函数和默认移动构造函数只是对类中的non-static成员做逐成员（memberwise）的拷贝或移动。当自动生成的函数的行为符合你的需求的时候，可以简单的将他们定义为<code>=default</code>。而当默认的行为不符合需求的时候，你自然需要自己来定义这些函数。</p><p>由此可以引申出著名的“三大法则”，如果你声明了拷贝构造、拷贝赋值运算符、析构函数中的其中一个，你应该把这三个函数都声明。这是因为，需要自定义这些函数通常是由于某种资源管理的需求，并且memberwise的拷贝，移动和默认的delete不能满足需求。在C++11之后，三大法则就变成了五大法则，你有很大可能还需要同时自定义移动构造函数和移动赋值运算符。</p><p>最后需要注意的是，标准没有规定成员函数模板的存在会阻止编译器生成特殊成员函数。这意味着如果Widget是这样的：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    Widget(<span class="keyword">const</span> T&amp; rhs);   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    Widget&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> T&amp; rhs);</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>编译器还是会为Widget生成拷贝构造函数和拷贝赋值运算符（假如条件满足），尽管这些模板可以被实例化来产生拷贝构造函数和拷贝赋值运算符的签名（当T是Widget的时候）。这种情况需要记住，在条款26中会说明它导致的重大后果。</p><h2 id="总结">总结</h2><ul><li>记住并理解特殊成员函数的生成条件</li><li>成员函数模板从来不会抑制特殊成员函数的生成</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;条款17-理解特殊成员函数的生成&quot;&gt;条款17 理解特殊成员函数的生成&lt;/h2&gt;
&lt;p&gt;正如大家所知，C++编译器会在特定条件下为类生成特殊的成员函数。C++98中有4种隐式生成的特殊成员函数，构造函数(constuctor)，析构函数(destructor)，拷贝构造函数(copy constructor)，拷贝赋值运算符(copy assignment operator)，从C++11开始又新增了移动构造函数(move constructor)，移动赋值运算符(move assignment operator)。&lt;br&gt;
他们的生成规则可用下图概括,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/natsu1211/pics/master/cpp%20implicit%20functions.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PL" scheme="https://natsu1211.com/categories/PL/"/>
    
      <category term="Tips" scheme="https://natsu1211.com/categories/PL/Tips/"/>
    
      <category term="Memo" scheme="https://natsu1211.com/categories/Memo/"/>
    
    
      <category term="C++" scheme="https://natsu1211.com/tags/C/"/>
    
      <category term="Special members" scheme="https://natsu1211.com/tags/Special-members/"/>
    
  </entry>
  
  <entry>
    <title>读薄Effective Modern C++ (条款16 使const成员函数成为线程安全函数)</title>
    <link href="https://natsu1211.com/modern-cpp-16.html"/>
    <id>https://natsu1211.com/modern-cpp-16.html</id>
    <published>2019-01-10T17:04:44.000Z</published>
    <updated>2019-02-11T10:01:43.382Z</updated>
    
    <content type="html"><![CDATA[<h2 id="条款16-使const成员函数成为线程安全函数">条款16 使const成员函数成为线程安全函数</h2><p>假如我们在数学领域工作，我们很可能会需要一个表示多项式的类，一个计算多项式的根（零点）的函数是很有必要的，也就是求多项式等于0时各个因子的值。这个函数不会改变多项式，所以我们把它声明为const： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Polynomial</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> RootsType =            <span class="comment">// 该数据结构存储</span></span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;;       <span class="comment">// 多项式的根</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function">RootsType <span class="title">roots</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>计算多项式的根的操作很耗时，我们会想到可以只计算一次，把结果缓存起来以便以后使用： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Polynomial</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> RootsType = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="function">RootsType <span class="title">roots</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!rootsAreValid)  &#123;   <span class="comment">// 如果无可用缓存值</span></span><br><span class="line">           ...                   <span class="comment">// 计算根，把结果存在rootVals</span></span><br><span class="line">           rootsAreVaild = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rootVals;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">mutable</span> <span class="keyword">bool</span> rootAreValid&#123; <span class="literal">false</span> &#125;;</span><br><span class="line">    <span class="keyword">mutable</span> RootsType rootVals&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>从用户角度来看，既然是const函数那么应当是只读的，在多线程环境下不加锁的调用该函数进行读操作是合情合理的。所以我们有必要保证const成员函数是线程安全的。 然而在这个函数中，因为mutable的使用，成员变量rootsAreValid和rootVals都有可能被改变，在多线程环境有data race的风险。</p><p>为了保证线程安全，最简单的办法就是使用互斥锁(mutex)， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Polynomial</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> RootsType = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="function">RootsType <span class="title">roots</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; g(m);    <span class="comment">// 加锁</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!roorsAreValid) &#123;</span><br><span class="line">            ...</span><br><span class="line">            rootsAreValid = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rootVals;</span><br><span class="line">    &#125;                                        <span class="comment">// 解锁</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">mutable</span> <span class="built_in">std</span>::mutex m;</span><br><span class="line">    <span class="keyword">mutable</span> <span class="keyword">bool</span> rootsAreValid&#123; <span class="literal">false</span> &#125;;</span><br><span class="line">    <span class="keyword">mutable</span> RootsType rootVals&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>需要注意std::mutex是一个只可移动（move）类型，把m添加到多项式对象会使得该对象不能被拷贝，只能被移动。</p><p>在一些情况中，使用互斥锁太过小题大做。例如，如果你需要计数一个成员被调用了多少次，那么用一个std::atomic计数器（原子操作类型，看条款40）将会减少很多开销（实际上是否会减少开销需要看互斥锁的具体实现），</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">distanceFromOrigin</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ++callCount;    <span class="comment">// 原子递增</span></span><br><span class="line">        <span class="keyword">return</span>  <span class="built_in">std</span>::<span class="built_in">sqrt</span>((x * x) + (y * y ));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">mutable</span> <span class="built_in">std</span>::atomic&lt;<span class="keyword">unsigned</span>&gt; callCount&#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>和std::mutex一样，std::atomic也是只可移动类型，所以Point对象也只可以移动，不能拷贝。<br>如果只有一个变量或者一个存储单元需求同步，那么使用std::atomic就足够了，但是你有两个或者更多的变量和存储单元需要以一个单元的形式操作，多个原子变量无法保证这点，应该使用互斥锁。</p><h2 id="总结">总结</h2><ul><li>保证const成员函数的线程安全，除非它们决不会在并发语境中使用。</li><li>使用std::atomic变量可能比互斥锁提供更好的性能，不过它们只适用于单一变量和单一存储单元。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;条款16-使const成员函数成为线程安全函数&quot;&gt;条款16 使const成员函数成为线程安全函数&lt;/h2&gt;
&lt;p&gt;假如我们在数学领域工作，我们很可能会需要一个表示多项式的类，一个计算多项式的根（零点）的函数是很有必要的，也就是求多项式等于0时各个因子的值。这个函数不会改变多项式，所以我们把它声明为const： &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Polynomial&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; RootsType =            &lt;span class=&quot;comment&quot;&gt;// 该数据结构存储&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;&amp;gt;;       &lt;span class=&quot;comment&quot;&gt;// 多项式的根&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;RootsType &lt;span class=&quot;title&quot;&gt;roots&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PL" scheme="https://natsu1211.com/categories/PL/"/>
    
      <category term="Tips" scheme="https://natsu1211.com/categories/PL/Tips/"/>
    
      <category term="Memo" scheme="https://natsu1211.com/categories/Memo/"/>
    
    
      <category term="C++" scheme="https://natsu1211.com/tags/C/"/>
    
      <category term="thread safety" scheme="https://natsu1211.com/tags/thread-safety/"/>
    
  </entry>
  
  <entry>
    <title>读薄Effective Modern C++ (条款15 尽可能的使用constexpr)</title>
    <link href="https://natsu1211.com/modern-cpp-15.html"/>
    <id>https://natsu1211.com/modern-cpp-15.html</id>
    <published>2019-01-06T12:47:15.000Z</published>
    <updated>2019-02-11T10:01:44.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="条款15-尽可能的使用constexpr">条款15 尽可能的使用constexpr</h2><p>constexpr可以说是c++11中最让人困惑的关键字，它用来修饰变量或函数，表明该变量或函数的值能够在编译期获得。这些变量和函数可以用于需要一个常量表达式（constant expression）的地方。例如， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sz;   <span class="comment">// 非constexpr变量</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">auto</span> arraySize1 = sz;   <span class="comment">// 错误，编译期间不知道sz的值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>, sz&gt; data1;        <span class="comment">// 错误，同样的问题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">auto</span> arraySize2 = <span class="number">10</span>;   <span class="comment">// 正确，10在编译期间是常量</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>, arraySize2&gt; data2;  <span class="comment">// 正确，arraySize2是constexpr的</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>实际上，当constexpr用于修饰对象或非静态成员函数时（当传递适当的参数时，下面会说），该对象和函数同时也是const的。<br>作为补充，constexpr变量需要满足以下条件，否则会产生编译错误。</p><ul><li>其类型必须是字面类型 (LiteralType) 。</li><li>它必须被立即初始化</li><li>其初始化的完整表达式，包括所有隐式转换、构造函数调用等，都必须是常量表达式</li></ul><p>而当constexpr修饰函数时，情况有所不同，不能保证该函数的值是编译期常量。</p><ul><li>constexpr函数可以用在需求编译期间常量的上下文中（比如上面创建std::array的表达式中）。在这种上下文中，如果调用时传进去的实参的值在编译期间已知，那么函数的结果会在编译期间计算。如果任何一个参数的值在编译期间未知，代码将不能通过编译。<br></li><li>如果用一个或者多个在编译期间未知的值作为参数调用constexpr函数，函数的行为和普通的函数一样，在运行期间计算结果。</li></ul><p>不准确的来说，constexpr函数需要保证函数的返回值和每个参数都为字面类型（LiteralType），否则会产生编译错误。 (因为条件较多，constexpr函数需要满足的更为具体的规则可以参考<a href="https://en.cppreference.com/w/cpp/language/constexpr" target="_blank" rel="noopener">这里</a>）</p><p>字面类型本质上就是一些在编译期间可确定值的类型。在C++14之前，除了void之外的内置类型都是字面类型（C++14开始void也算，因此C++14开始constexpr的返回值类型可以为void，而C++11不行），不过用户定义的类型也有可能是字面值类型，因为我们可以将构造函数和其他成员函数也声明为constexpr的： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">constexpr</span> <span class="title">Point</span><span class="params">(<span class="keyword">double</span> xVal = <span class="number">0</span>, <span class="keyword">double</span> yVal = <span class="number">0</span>)</span> <span class="keyword">noexcept</span></span></span><br><span class="line">   : x(xVal), y(yVal)</span><br><span class="line">   &#123;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">constexpr</span> <span class="keyword">double</span> <span class="title">xValue</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> xVal; &#125;</span><br><span class="line">   <span class="function"><span class="keyword">constexpr</span> <span class="keyword">double</span> <span class="title">yValue</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> yVal; &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">constexpr</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">double</span> newX)</span> <span class="keyword">noexcept</span> </span>&#123; x = newX; &#125; <span class="comment">// c++14</span></span><br><span class="line">   <span class="function"><span class="keyword">constexpr</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">double</span> newY)</span> <span class="keyword">noexcept</span> </span>&#123; y = newY; &#125; <span class="comment">// c++14</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">   <span class="keyword">double</span> x, y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>如果传进来的参数在编译时已知，Point可以用constexpr初始化： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> Point <span class="title">p1</span><span class="params">(<span class="number">9.4</span>, <span class="number">27.7</span>)</span></span>;  <span class="comment">// 正确，在编译时“运行”constexpr构造</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> Point <span class="title">p2</span><span class="params">(<span class="number">28.8</span>, <span class="number">5.3</span>)</span></span>;  <span class="comment">// 也正确</span></span><br></pre></td></tr></table></figure></p><p>（constexpr构造函数需要满足的条件可以参考<a href="https://en.cppreference.com/w/cpp/language/constexpr" target="_blank" rel="noopener">这里</a>，什么样的类型是LiteralType可以参考<a href="https://en.cppreference.com/w/cpp/named_req/LiteralType" target="_blank" rel="noopener">这里</a>）</p><p>同时我们也可以写出操作这些编译期对象的constexpr函数， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> Point <span class="title">reflection</span><span class="params">(<span class="keyword">const</span> Point &amp;p)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Point result;     <span class="comment">// create non-const Point</span></span><br><span class="line"></span><br><span class="line">    result.setX(-p.xValue());</span><br><span class="line">    result.setY(-p.yValue());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最终用户的代码会像以下这样， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> Point <span class="title">p1</span><span class="params">(<span class="number">9.4</span>, <span class="number">27.7</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> Point <span class="title">p2</span><span class="params">(<span class="number">28.8</span>, <span class="number">5.3</span>)</span></span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">auto</span> mid = midpoint(p1, p2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">auto</span> reflectedMid =      <span class="comment">// reflectedMid的值是（-19.1, -16.5）</span></span><br><span class="line">reflection(mid);                   <span class="comment">// 而且在编译期间就知道了</span></span><br></pre></td></tr></table></figure></p><p>因为到了C++14/C++17/C++20，constexpr的限制已经放的如此的宽松。这意味着我们有足够的设施能够将运行时的工作转移到编译时，这也代表我们的程序可以运行的更快（当然编译时间会变长）。</p><p>通过尽可能地使用constexpr，我们最大化了对象和函数的可能使用的情况（既可以像传统运行期函数一样使用，也可以用在需要常量表达式的上下文中）。注意，constexpr是一个对象或函数接口很重要的一部分。constexpr表明“我可以用于需求常量表达式的上下文”，如果你把对象或者函数声明为constexpr，用户就有可能把它用于这种上下文。后来，如果你觉得你使用constexpr是个错误，然后你删除了它，这样就可能造成用户大量代码无法编译（例如，为了调试添加I/O函数会导致这种问题，因为I/O语句通常不允许出现在constexpr函数）。因此，一旦选择了constexpr作为接口的一部分，就需要长期保证该接口不会改变。</p><h2 id="总结">总结</h2><ul><li>constexpr对象是const的，它需要用编译期间已知的值初始化。</li><li>constexpr函数在传入编译期已知值作为参数时，函数的返回值也能在编译期获得。</li><li>constexpr对象和函数比non-constexpr对象和函数能运用在更加广泛的语境中。</li><li>constexpr是对象和函数接口的一部分。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;条款15-尽可能的使用constexpr&quot;&gt;条款15 尽可能的使用constexpr&lt;/h2&gt;
&lt;p&gt;constexpr可以说是c++11中最让人困惑的关键字，它用来修饰变量或函数，表明该变量或函数的值能够在编译期获得。这些变量和函数可以用于需要一个常量表达式（constant expression）的地方。例如， &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sz;   &lt;span class=&quot;comment&quot;&gt;// 非constexpr变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; arraySize1 = sz;   &lt;span class=&quot;comment&quot;&gt;// 错误，编译期间不知道sz的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, sz&amp;gt; data1;        &lt;span class=&quot;comment&quot;&gt;// 错误，同样的问题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; arraySize2 = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;   &lt;span class=&quot;comment&quot;&gt;// 正确，10在编译期间是常量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, arraySize2&amp;gt; data2;  &lt;span class=&quot;comment&quot;&gt;// 正确，arraySize2是constexpr的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PL" scheme="https://natsu1211.com/categories/PL/"/>
    
      <category term="Tips" scheme="https://natsu1211.com/categories/PL/Tips/"/>
    
      <category term="Memo" scheme="https://natsu1211.com/categories/Memo/"/>
    
    
      <category term="C++" scheme="https://natsu1211.com/tags/C/"/>
    
      <category term="constexpr" scheme="https://natsu1211.com/tags/constexpr/"/>
    
  </entry>
  
  <entry>
    <title>读薄Effective Modern C++ (条款14 使用noexcept修饰不抛出异常的函数)</title>
    <link href="https://natsu1211.com/modern-cpp-14.html"/>
    <id>https://natsu1211.com/modern-cpp-14.html</id>
    <published>2018-12-01T09:49:51.000Z</published>
    <updated>2019-02-11T10:01:45.863Z</updated>
    
    <content type="html"><![CDATA[<h2 id="条款14-使用noexcept修饰不抛出异常的函数">条款14 使用noexcept修饰不抛出异常的函数</h2><p>C++98引入了异常规范，用于显式表明该函数可能抛出的异常类型，语法如下 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">func</span> <span class="params">(<span class="keyword">char</span> param)</span> <span class="title">throw</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">char</span>, exception)</span></span>;</span><br></pre></td></tr></table></figure></p><p>表明该函数可能会抛出int，char或exception类型的异常，如果抛出了其他类型的，该异常无法被catch，而会导致程序异常终止。<br>异常规范是如此严格，并且由于难以知道该函数中调用的函数可能会抛出什么类型的异常，导致异常规范难以使用，在C++11中已经被废弃。<br><a id="more"></a> C++11认为对函数真正有用的信息是该函数究竟会不会抛出异常，因而引入了noexcept关键字,用于标识函数不会抛出异常。而C++98中需要使用<code>throw()</code>, <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="title">throw</span><span class="params">()</span></span>; <span class="comment">// no exceptions from f: C++98 style </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="keyword">noexcept</span></span>; <span class="comment">// no exceptions from f: C++11 style</span></span><br></pre></td></tr></table></figure></p><p>相比于C++98的<code>throw()</code>，<code>noexcept</code>主要有两个优势，</p><ol type="1"><li>能够获得最大限度的编译器优化。标记为noexcept的函数，优化器可能无须保持调用栈,并且也无须保证object按照构造时相反的顺序被析构。而throw()则没有这些被优化的机会。</li><li>标准库的一些函数，针对noexcept函数进行了优化，能够获得更好的性能。比如std::vector::push_back函数，为了保证异常安全性，只有在确保元素的move操作符不会抛出异常，亦即被标记为noexcept的时候，才会使用move操作代替copy操作。</li></ol><p>然而需要注意的是noexcept是函数签名的一部分。也就是说，一旦决定使用noexcept标记函数并公开，你将很难再改变它，因为从函数签名中删除noexcept的改动将是破坏性的。<br>另外需要注意的是，大多数函数是异常中立(exception-neutral)的，很多函数本身并不抛出异常，但是它内部调用的函数却会抛出异常，这类函数并不适合被标记为noexcept。 最后，因为历史遗留原因，编译器并不会对在noexcept函数中调用非noexcept函数进行报错和警告。比如std名称空间中的C标准库函数就没有标记为noexcept，即使它们的实现并不会抛出异常。</p><h2 id="总结">总结</h2><ul><li>noexcept是函数接口的一部分，这意味着使用者依赖于它。</li><li>比起非noexcept函数，noexcept函数更有可能被优化。</li><li>noexcept对move操作，swap函数，析构函数非常重要。</li><li>大多数函数是异常中立的。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;条款14-使用noexcept修饰不抛出异常的函数&quot;&gt;条款14 使用noexcept修饰不抛出异常的函数&lt;/h2&gt;
&lt;p&gt;C++98引入了异常规范，用于显式表明该函数可能抛出的异常类型，语法如下 &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; param)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;, exception)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;表明该函数可能会抛出int，char或exception类型的异常，如果抛出了其他类型的，该异常无法被catch，而会导致程序异常终止。&lt;br&gt;
异常规范是如此严格，并且由于难以知道该函数中调用的函数可能会抛出什么类型的异常，导致异常规范难以使用，在C++11中已经被废弃。&lt;br&gt;
    
    </summary>
    
      <category term="PL" scheme="https://natsu1211.com/categories/PL/"/>
    
      <category term="Tips" scheme="https://natsu1211.com/categories/PL/Tips/"/>
    
      <category term="Memo" scheme="https://natsu1211.com/categories/Memo/"/>
    
    
      <category term="C++" scheme="https://natsu1211.com/tags/C/"/>
    
      <category term="noexcept" scheme="https://natsu1211.com/tags/noexcept/"/>
    
  </entry>
  
  <entry>
    <title>读薄Effective Modern C++ (条款13 优先使用const_iterator而不是iterator)</title>
    <link href="https://natsu1211.com/modern-cpp-13.html"/>
    <id>https://natsu1211.com/modern-cpp-13.html</id>
    <published>2018-11-20T15:21:26.000Z</published>
    <updated>2019-02-11T09:59:03.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="条款13-优先使用const_iterator而不是iterator">条款13 优先使用const_iterator而不是iterator</h2><p>const_iterator在STL中等价于指向const的指针。被指向的数值是不能被修改的。标准的做法是应该使用const的迭代器的地方，也就是尽可能的在没有必要修改指针所指向的内容的地方使用const_iterator。<br><a id="more"></a></p><p>比如我们想在vector中找到1983并把它替换成1998，我们会写下以下代码, <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; values;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it =</span><br><span class="line">    <span class="built_in">std</span>::find(values.begin(),values.end(), <span class="number">1983</span>);</span><br><span class="line">values.insert(it, <span class="number">1998</span>);</span><br></pre></td></tr></table></figure></p><p>这里因为并不会改变itertor所指向的数据，const_iterator应当是更合适的选择，然而在C++98中，std::find等函数只接受非const的iterator，并且没有简单的办法从非const容器获得const_iterator，在C++98中使用const_iterator只是自寻烦恼。<br>然而情况在C++11中大有不同，const_iterator容易获取并且容易使用。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; values; <span class="comment">// as before ...</span></span><br><span class="line"><span class="keyword">auto</span> it = <span class="built_in">std</span>::find(values.cbegin(),values.cend(), <span class="number">1983</span>); <span class="comment">// and cend</span></span><br><span class="line">values.insert(it, <span class="number">1998</span>);<span class="comment">// use cbegin</span></span><br></pre></td></tr></table></figure></p><p>需要注意的是，当你需要写出更为泛型的代码的时候，C++11对const_iterator的支持可能会略显不足， 比如我们要写一个在容器中寻找元素并进行替换的泛型函数，原生C数组，我们会希望使用非成员函数的版本来获取迭代器。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> C, <span class="keyword">typename</span> V&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findAndInsert</span><span class="params">(C&amp; container, <span class="keyword">const</span> V&amp; targetVal, <span class="keyword">const</span> V&amp; insertVal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::cbegin;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::cend;</span><br><span class="line">    <span class="keyword">const</span> V&amp; targetVal,</span><br><span class="line">    <span class="keyword">const</span> V&amp; insertVal)</span><br><span class="line">    <span class="keyword">auto</span> it = <span class="built_in">std</span>::find(cbegin(container), cend(container), targetVal);</span><br><span class="line">    container.insert(it, insertVal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的代码需要C++14才会工作，因为C++11中没有提供cbegin和cend的非成员函数版本。 我们可以自己为C++11添加， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">C</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">auto</span> <span class="title">cbegin</span>(<span class="title">const</span> <span class="title">C</span>&amp; <span class="title">container</span>)-&gt;<span class="title">decltype</span>(<span class="title">std</span>:</span>:begin(container))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::begin(container);        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="总结">总结</h2><ul><li>优先使用const_iterator而不是iterator</li><li>在泛型代码中，优先使用非成员函数版本的begin, end, rbegin ,rend函数</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;条款13-优先使用const_iterator而不是iterator&quot;&gt;条款13 优先使用const_iterator而不是iterator&lt;/h2&gt;
&lt;p&gt;const_iterator在STL中等价于指向const的指针。被指向的数值是不能被修改的。标准的做法是应该使用const的迭代器的地方，也就是尽可能的在没有必要修改指针所指向的内容的地方使用const_iterator。&lt;br&gt;
    
    </summary>
    
      <category term="PL" scheme="https://natsu1211.com/categories/PL/"/>
    
      <category term="Tips" scheme="https://natsu1211.com/categories/PL/Tips/"/>
    
      <category term="Memo" scheme="https://natsu1211.com/categories/Memo/"/>
    
    
      <category term="C++" scheme="https://natsu1211.com/tags/C/"/>
    
      <category term="iterator" scheme="https://natsu1211.com/tags/iterator/"/>
    
  </entry>
  
  <entry>
    <title>读薄Effective Modern C++ (条款12 将覆盖函数(overriding function)声明为override)</title>
    <link href="https://natsu1211.com/modern-cpp-12.html"/>
    <id>https://natsu1211.com/modern-cpp-12.html</id>
    <published>2018-11-04T14:17:23.000Z</published>
    <updated>2019-02-11T09:57:49.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="条款12-将覆盖函数overriding-function声明为override">条款12 将覆盖函数(overriding function)声明为override</h2><p>类，继承与虚函数是C++实现面向对象的基础。在子类中覆盖掉父类中对应的虚函数，以此来实现多态。override关键字可以用来显式标识虚函数覆盖，表明该函数在子类中有不同于父类的实现。 <a id="more"></a></p><p>如果要使用覆盖的函数，必须满足以下条件： - 父类中的函数被声明为virtual。 - 父类中和子类中的函数名称必须是完全一致的（除了虚析构函数）。 - 父类中和子类中的函数的参数类型必须完全一致。 - 父类中和子类中的函数的常量特性必须完全一致。 - 父类中和子类中的函数的返回值类型和异常声明必须兼容。 C++11中，附加了一个条件，虽然它并不太常用， - 函数的引用修饰符（reference qualifiers）必须完全一致。</p><p>对覆盖函数的这些要求意味着，一个小的错误会产生一个很大不同的结果。在覆盖函数中出现的错误通常并不会引起编译错误，所以不容易察觉。比如以下的例子， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf1</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf2</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf3</span><span class="params">()</span> &amp;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mf4</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">irtual</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf1</span><span class="params">()</span></span>; <span class="comment">// 不是const函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf2</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> x)</span></span>; <span class="comment">// 参数类型不是int</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mf3</span><span class="params">()</span> &amp;&amp;</span>; <span class="comment">// 引用修饰符不是左值引用</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mf4</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">// 没有声明为virtual</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>子类并没有对父类的函数进行覆盖，而是重新定义了新的函数，这显然不是我们期望的。 因为虚函数覆盖是如此容易出错，所以C++11提供了override关键字来显式表示这是一个虚函数覆盖，如果不符合覆盖的条件，则会产生编译错误。 还有一点好处是，override关键字是上下文相关的，只在函数声明的末尾起效。也就是说以下C++98时代的代码不会产生编译错误， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Warning</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">override</span><span class="params">()</span></span>; <span class="comment">// 名为override的函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 在C++98和C++11中意义相同</span></span><br></pre></td></tr></table></figure></p><h2 id="总结">总结</h2><ul><li>使用override来标识函数覆盖。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;条款12-将覆盖函数overriding-function声明为override&quot;&gt;条款12 将覆盖函数(overriding function)声明为override&lt;/h2&gt;
&lt;p&gt;类，继承与虚函数是C++实现面向对象的基础。在子类中覆盖掉父类中对应的虚函数，以此来实现多态。override关键字可以用来显式标识虚函数覆盖，表明该函数在子类中有不同于父类的实现。
    
    </summary>
    
      <category term="PL" scheme="https://natsu1211.com/categories/PL/"/>
    
      <category term="Tips" scheme="https://natsu1211.com/categories/PL/Tips/"/>
    
      <category term="Memo" scheme="https://natsu1211.com/categories/Memo/"/>
    
    
      <category term="C++" scheme="https://natsu1211.com/tags/C/"/>
    
      <category term="override" scheme="https://natsu1211.com/tags/override/"/>
    
  </entry>
  
  <entry>
    <title>读薄Effective Modern C++ (条款11 优先使用delete关键字删除函数而不是不实现的私有函数)</title>
    <link href="https://natsu1211.com/modern-cpp-11.html"/>
    <id>https://natsu1211.com/modern-cpp-11.html</id>
    <published>2018-10-31T15:22:48.000Z</published>
    <updated>2019-02-11T09:57:13.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="条款11-优先使用delete关键字删除函数而不是不实现的私有函数">条款11 优先使用delete关键字删除函数而不是不实现的私有函数</h2><p>有时我们会希望能够禁用某些函数，比如在构造单例对象的时候，我们会希望该单例类的拷贝构造和赋值构造函数无法被用户调用。 在C++98时代，我们需要运用将该函数定义为私有函数但是不实现它的技巧来实现这个目的，如果访问到这些函数，在链接的时候会因为找不到定义而引起链接错误。 <a id="more"></a> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">charT</span>, <span class="title">class</span> <span class="title">traits</span> = <span class="title">char_traits</span>&lt;charT&gt; &gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">basic_ios</span> :</span><span class="keyword">public</span> ios_base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">basic_ios(<span class="keyword">const</span> basic_ios&amp; );                   <span class="comment">// 没有定义</span></span><br><span class="line">basic_ios&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> basic_ios&amp;);         <span class="comment">// 没有定义</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>而C++11提供了delete关键字来更好的完成这个任务。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">charT</span>, <span class="title">class</span> <span class="title">traits</span> = <span class="title">char_traits</span>&lt;charT&gt; &gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">basic_ios</span> :</span> <span class="keyword">public</span> ios_base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">    basic_ios(<span class="keyword">const</span> basic_ios&amp; ) = <span class="keyword">delete</span>;</span><br><span class="line">    basic_ios&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> basic_ios&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>任何代码试图调用该函数都会引发一个编译错误，而不是链接错误，这是delete关键字的优势之一。</p><p>delete关键字的另一个优势是，任何函数都可以被标记为delete，而私有函数首先必须是个类的成员函数。比如我们有一个判断一个int是否为幸运数字的简单函数， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLucky</span><span class="params">(<span class="keyword">int</span> number)</span></span>;</span><br></pre></td></tr></table></figure></p><p>因为C++中很多类型都能隐式转换为int，所以以下调用也是合法的， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(isLucky(<span class="string">'a'</span>)) ...              <span class="comment">// a 是否是幸运数字？</span></span><br><span class="line"><span class="keyword">if</span>(isLucky(ture)) ...             <span class="comment">// 返回true?</span></span><br><span class="line"><span class="keyword">if</span>(isLucky(<span class="number">3.5</span>)) ...              <span class="comment">// 我们是否应该在检查它是否幸运之前裁剪为3？</span></span><br></pre></td></tr></table></figure></p><p>但是有些转换不是我们期望的，这时就可以将不需要的重载标记为delete， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLucky</span><span class="params">(<span class="keyword">int</span> number)</span></span>;           <span class="comment">// 原本的函数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLucky</span><span class="params">(<span class="keyword">char</span>)</span> </span>= <span class="keyword">delete</span>;        <span class="comment">// 拒绝char类型</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLucky</span><span class="params">(<span class="keyword">bool</span>)</span> </span>= <span class="keyword">delete</span>;        <span class="comment">// 拒绝bool类型</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLucky</span><span class="params">(<span class="keyword">double</span>)</span> </span>= <span class="keyword">delete</span>;      <span class="comment">// 拒绝double和float类型</span></span><br></pre></td></tr></table></figure></p><p>delete还可以用来禁止特定的模板实现，这也是私有函数无法做到的。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processPointer</span><span class="params">(T* ptr)</span></span>;</span><br></pre></td></tr></table></figure></p><p>在指针的家族中，有两个特殊的指针。一个是void* 指针，因为没有办法对它们解引用，递增或者递减它们。另一个是char* 指针，因为它们往往表示指向C类型的字符串，而不是指向独立字符的指针。这些特殊情况经常需要特殊处理，在processPointer模板中，我们希望能拒绝这两种指针，可以用以下方法来简单的实现， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="keyword">void</span> processPointer&lt;<span class="keyword">const</span> <span class="keyword">void</span>&gt;(<span class="keyword">const</span> <span class="keyword">void</span>*) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="keyword">void</span> processPointer&lt;<span class="keyword">const</span> <span class="keyword">char</span>&gt;(<span class="keyword">const</span> <span class="keyword">char</span>*) = <span class="keyword">delete</span>;</span><br></pre></td></tr></table></figure></p><p>而以下的方法则行不通， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">processPointer</span><span class="params">(T* ptr)</span></span></span><br><span class="line"><span class="function">    </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;&gt;                                       <span class="comment">// 错误！</span></span><br><span class="line">    <span class="keyword">void</span> processPointer&lt;<span class="keyword">void</span>&gt;(<span class="keyword">void</span>*)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>因为一个成员函数模板的某个偏特化，拥有不同于模板主体的访问权限是不被允许的。</p><h3 id="总结">总结</h3><ul><li>优先使用删除函数而不是私有而不定义的函数</li><li>任何函数都可以被声明为删除，包括非成员函数和模板函数</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;条款11-优先使用delete关键字删除函数而不是不实现的私有函数&quot;&gt;条款11 优先使用delete关键字删除函数而不是不实现的私有函数&lt;/h2&gt;
&lt;p&gt;有时我们会希望能够禁用某些函数，比如在构造单例对象的时候，我们会希望该单例类的拷贝构造和赋值构造函数无法被用户调用。 在C++98时代，我们需要运用将该函数定义为私有函数但是不实现它的技巧来实现这个目的，如果访问到这些函数，在链接的时候会因为找不到定义而引起链接错误。
    
    </summary>
    
      <category term="PL" scheme="https://natsu1211.com/categories/PL/"/>
    
      <category term="Tips" scheme="https://natsu1211.com/categories/PL/Tips/"/>
    
      <category term="Memo" scheme="https://natsu1211.com/categories/Memo/"/>
    
    
      <category term="C++" scheme="https://natsu1211.com/tags/C/"/>
    
      <category term="type alias" scheme="https://natsu1211.com/tags/type-alias/"/>
    
  </entry>
  
  <entry>
    <title>读薄Effective Modern C++ (条款10 优先使用有作用域的enum而不是无作用域的enum)</title>
    <link href="https://natsu1211.com/modern-cpp-10.html"/>
    <id>https://natsu1211.com/modern-cpp-10.html</id>
    <published>2018-10-27T17:18:56.000Z</published>
    <updated>2019-02-11T09:56:53.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="条款10-优先使用有作用域的enmu而不是无作用域的enum">条款10 优先使用有作用域的enmu而不是无作用域的enum</h2><p>一般而言，{}会建立一个新的作用域，将作用域内部和外部的名称隔离开。但是这对于C++98风格的enum中的枚举元素并不成立。枚举元素和包含它的枚举类型同属一个作用域，这意味着在这个作用域中不能再有同样名称的定义： <a id="more"></a> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123; black, white, red&#125;;                 <span class="comment">// black, white, red 和</span></span><br><span class="line">                                             <span class="comment">// Color  同属一个作用域</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> white = <span class="literal">false</span>;                              <span class="comment">// 错误！因为 white</span></span><br><span class="line">                                             <span class="comment">// 在这个作用域已经被声明过</span></span><br></pre></td></tr></table></figure></p><p>而enum class则不会有该问题， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span> &#123;</span> black, white, red &#125;; <span class="comment">// black, white, red</span></span><br><span class="line"><span class="keyword">auto</span> white = <span class="literal">false</span>;                     <span class="comment">// fine</span></span><br><span class="line">Color c = white;                        <span class="comment">// error!</span></span><br><span class="line">Color c = Color::white;                 <span class="comment">// fine</span></span><br><span class="line"><span class="keyword">auto</span> c = Color::white;                  <span class="comment">// fine</span></span><br></pre></td></tr></table></figure></p><p>上面的理由已经足够让我们选择enum class，但是enum class还有一个优势，它的枚举元素是强类型的。 对于无作用域的enum，枚举元素可以隐式转换为数值类型，</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123; black, white, red &#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="keyword">size_t</span>&gt; primeFactors(<span class="built_in">std</span>::<span class="keyword">size_t</span> x);</span><br><span class="line">Color c = red;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (c &lt; <span class="number">14.5</span>) &#123;                     <span class="comment">//能通过编译！</span></span><br><span class="line">  <span class="keyword">auto</span> factors = primeFactors(c);   <span class="comment">//能通过编译！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个表示颜色的变量能够和double类型作比较，以及能用隐式转换为std::size_t类型，显然不是我们所期望的，使用enum class的话就能达到我们期望的效果， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span> &#123;</span> black, white, red &#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="keyword">size_t</span>&gt; primeFactors(<span class="built_in">std</span>::<span class="keyword">size_t</span> x);</span><br><span class="line">Color c = Color::red;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (c &lt; <span class="number">14.5</span>) &#123;                     <span class="comment">//编译错误！</span></span><br><span class="line">  <span class="keyword">auto</span> factors = primeFactors(c);   <span class="comment">//编译错误！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果确实需要进行类型转换，可以用static_cast进行显式转换。</p><p>有些时候，无作用域的enum的枚举项能够隐式转换为整数的特性会比较方便使用，比如作为有意义的索引值， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UserInfo = <span class="built_in">std</span>::tuple&lt;<span class="built_in">std</span>::<span class="built_in">string</span>,</span><br><span class="line">                           <span class="built_in">std</span>::<span class="built_in">string</span>,        <span class="comment">// email</span></span><br><span class="line">                           <span class="built_in">std</span>::<span class="keyword">size_t</span>&gt; ;      <span class="comment">// reputation</span></span><br><span class="line"><span class="keyword">enum</span> UserInfoFields &#123; uiName, uiEmail, uiReputation &#125;;</span><br><span class="line">UserInfo uInfo;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">auto</span> val1 = <span class="built_in">std</span>::get&lt;<span class="number">1</span>&gt;(uInfo);       <span class="comment">// 不清楚索引1对应的数据是什么</span></span><br><span class="line"><span class="keyword">auto</span> val2 = <span class="built_in">std</span>::get&lt;uiEmail&gt;(uInfo); <span class="comment">// 隐式转换为1，清楚的知道是获取email字段</span></span><br></pre></td></tr></table></figure></p><p>而enum class因为无法隐式转换，需要写成， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> val = <span class="built_in">std</span>::get&lt;<span class="keyword">static_cast</span>&lt;<span class="built_in">std</span>::<span class="keyword">size_t</span>&gt;(UserInfoFields::uiEmail)&gt;(uInfo);</span><br></pre></td></tr></table></figure></p><p>但是这种写法的可读性不是太好，我们可以提供一个转换函数来增加可读性， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> E&gt;    <span class="comment">// C++14 constexpr auto</span></span><br><span class="line">toUType(E enumerator) <span class="keyword">noexcept</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="built_in">std</span>::<span class="keyword">underlying_type_t</span>&lt;E&gt;&gt;(enumerator);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> val = <span class="built_in">std</span>::get&lt;toUType(UserInfoFields::uiEmail)&gt;(uInfo);</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><ul><li>C++98风格的enum是没有作用域的enum</li><li>有作用域的枚举体的枚举元素仅仅对枚举体内部可见。只能通过类型转换（cast）转换为其他类型</li><li>有作用域和没有作用域的enum都支持指定潜在类型。有作用域的enum的默认潜在类型是int。没有作用域的enum没有默认的潜在类型。</li><li>有作用域的enum总是可以前置声明的。没有作用域的enum只有当指定潜在类型时才可以前置声明。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;条款10-优先使用有作用域的enmu而不是无作用域的enum&quot;&gt;条款10 优先使用有作用域的enmu而不是无作用域的enum&lt;/h2&gt;
&lt;p&gt;一般而言，{}会建立一个新的作用域，将作用域内部和外部的名称隔离开。但是这对于C++98风格的enum中的枚举元素并不成立。枚举元素和包含它的枚举类型同属一个作用域，这意味着在这个作用域中不能再有同样名称的定义：
    
    </summary>
    
      <category term="PL" scheme="https://natsu1211.com/categories/PL/"/>
    
      <category term="Tips" scheme="https://natsu1211.com/categories/PL/Tips/"/>
    
      <category term="Memo" scheme="https://natsu1211.com/categories/Memo/"/>
    
    
      <category term="C++" scheme="https://natsu1211.com/tags/C/"/>
    
      <category term="type alias" scheme="https://natsu1211.com/tags/type-alias/"/>
    
  </entry>
  
  <entry>
    <title>读薄Effective Modern C++ (条款9 优先使用别名声明而不是typedef)</title>
    <link href="https://natsu1211.com/modern-cpp-9.html"/>
    <id>https://natsu1211.com/modern-cpp-9.html</id>
    <published>2018-10-27T07:15:51.000Z</published>
    <updated>2019-02-11T09:51:02.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="条款9-优先使用别名声明而不是typedef">条款9 优先使用别名声明而不是typedef</h2><p>C++11中新增了别名声明，对于之前的typedef语句，可以使用别名声明语法写成 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// FP等价于一个函数指针，这个函数的参数是一个int类型和</span></span><br><span class="line"><span class="comment">// std::string常量类型，没有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*FP)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp;)</span></span>;      <span class="comment">// typedef</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上</span></span><br><span class="line"><span class="keyword">using</span> FP = <span class="keyword">void</span> (*)(<span class="keyword">int</span>, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp;);     <span class="comment">// 别名声明</span></span><br></pre></td></tr></table></figure></p><p>也许别名声明看起来可读性更好，但是这并不足以成为放弃typedef使用别名声明的决定性理由。别名声明的真正优势并不在这，而在于它能够定义模板别名， <a id="more"></a></p><p>typedef需要新定义一个模板类来模拟实现模板别名功能， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;                            </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyAllocList</span> &#123;</span>                            </span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">list</span>&lt;T, MyAlloc&lt;T&gt;&gt; type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">MyAllocList&lt;Widget&gt;::type lw;                   <span class="comment">// 客户代码</span></span><br></pre></td></tr></table></figure></p><p>而使用别名声明则很直接， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;typname T&gt;</span><br><span class="line"><span class="keyword">using</span> MyAllocList = <span class="built_in">std</span>::<span class="built_in">list</span>&lt;T, MyAlloc&lt;T&gt;&gt;;</span><br><span class="line"></span><br><span class="line">MyAllocList&lt;Widget&gt; lw;                         <span class="comment">// 客户代码</span></span><br></pre></td></tr></table></figure></p><p>特别当你在另一个模板类中使用该类型别名的时候，对比typedef，别名声明语法的优势则显得更加明显， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;                            <span class="comment">// Widget&lt;T&gt; 包含</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span>&#123;</span>                                   <span class="comment">// 一个 MyAloocList&lt;T&gt;</span></span><br><span class="line"><span class="keyword">private</span>:                                        <span class="comment">// 作为一个数据成员</span></span><br><span class="line"><span class="keyword">typename</span> MyAllocList&lt;T&gt;::type <span class="built_in">list</span>;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>因为无法知道名称MyAllocList<t>::type究竟是一个类型，还是一个变量，所以需要加上typename来明确表明这是一个类型。而别名声明则没有冗余的typename和::type， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;typname T&gt;                             </span><br><span class="line"><span class="keyword">using</span> MyAllocList = <span class="built_in">std</span>::<span class="built_in">list</span>&lt;T, MyAlloc&lt;T&gt;&gt;;   <span class="comment">// 和以前一样</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">MyAllocList&lt;T&gt; <span class="built_in">list</span>;  <span class="comment">// 编辑器知道MyAllocList&lt;T&gt;一定是一个类型</span></span><br><span class="line">...                                          </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></t></p><p>另外，对于标准库中的type traits，C++11提供的接口都是基于typedef的，而在C++14中都提供了相应更为简洁的别名声明的版本， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::remove_const&lt;T&gt;::type                <span class="comment">// C++11: const T -&gt; T</span></span><br><span class="line"><span class="built_in">std</span>::<span class="keyword">remove_const_t</span>&lt;T&gt;                    <span class="comment">// 等价的C++14</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::remove_reference&lt;T&gt;::type            <span class="comment">// C++11: T&amp;/T&amp;&amp; -&gt; T</span></span><br><span class="line"><span class="built_in">std</span>::<span class="keyword">remove_reference_t</span>&lt;T&gt;                <span class="comment">// 等价的C++14</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::add_lvalue_reference&lt;T&gt;::type        <span class="comment">// C++11: T -&gt; T&amp;</span></span><br><span class="line"><span class="built_in">std</span>::<span class="keyword">add_lvalue_reference_t</span>&lt;T&gt;            <span class="comment">// 等价的C++14</span></span><br></pre></td></tr></table></figure></p><p>它的定义很简单，即使只能用C++11的环境也只需自己简单的定义一下即可， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">using</span> <span class="title">remove_const_t</span> = <span class="title">typename</span> <span class="title">remove_const</span>&lt;T&gt;:</span>:type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">using</span> <span class="title">remove_reference_t</span> = <span class="title">typename</span> <span class="title">remove_reference</span>&lt;T&gt;:</span>:type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">using</span> <span class="title">add_lvalue_reference_t</span> = <span class="title">typename</span> <span class="title">add_lvalue_reference</span>&lt;T&gt;:</span>:type;</span><br></pre></td></tr></table></figure></p><h2 id="总结">总结</h2><ul><li>typedef不支持模板化，但是别名声明支持</li><li>模板别名避免了::type后缀，在模板中，typedef还经常需要使用typename前缀</li><li>C++14为C++11中的type traits提供了模板别名</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;条款9-优先使用别名声明而不是typedef&quot;&gt;条款9 优先使用别名声明而不是typedef&lt;/h2&gt;
&lt;p&gt;C++11中新增了别名声明，对于之前的typedef语句，可以使用别名声明语法写成 &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// FP等价于一个函数指针，这个函数的参数是一个int类型和&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// std::string常量类型，没有返回值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(*FP)&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;amp;)&lt;/span&gt;&lt;/span&gt;;      &lt;span class=&quot;comment&quot;&gt;// typedef&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 同上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; FP = &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (*)(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;amp;);     &lt;span class=&quot;comment&quot;&gt;// 别名声明&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也许别名声明看起来可读性更好，但是这并不足以成为放弃typedef使用别名声明的决定性理由。别名声明的真正优势并不在这，而在于它能够定义模板别名，
    
    </summary>
    
      <category term="PL" scheme="https://natsu1211.com/categories/PL/"/>
    
      <category term="Tips" scheme="https://natsu1211.com/categories/PL/Tips/"/>
    
      <category term="Memo" scheme="https://natsu1211.com/categories/Memo/"/>
    
    
      <category term="C++" scheme="https://natsu1211.com/tags/C/"/>
    
      <category term="type alias" scheme="https://natsu1211.com/tags/type-alias/"/>
    
  </entry>
  
  <entry>
    <title>读薄Effective Modern C++ (条款8 优先使用nullptr而不是0和NULL)</title>
    <link href="https://natsu1211.com/modern-cpp-8.html"/>
    <id>https://natsu1211.com/modern-cpp-8.html</id>
    <published>2018-10-26T15:35:12.000Z</published>
    <updated>2019-02-11T09:51:02.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="条款8-优先使用nullptr而不是0和null">条款8 优先使用nullptr而不是0和NULL</h2><p>使用0或者NULL来初始化空指针的最大问题是0是int类型，NULL根据定义可能是int或是long，但是不会是个指针类型。编译器只是勉强将0解释为空指针。</p><p>nullptr作为C++11中新增的关键字，它的优势是它不再是int类型，而是一个可以表示指向任意类型的指针的类型。nullptr在内部的类型是std::nullptr_t，这是一个模板类，内部定义了转换操作符，可以隐式的转换为所有的原始的指针类型。 <a id="more"></a></p><p>在函数重载决议时，nullptr可以避免错误的类型重载。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span></span>;  <span class="comment">// 函数f的三个重载</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">bool</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">void</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line">f(<span class="number">0</span>);         <span class="comment">// 调用 f(int)，而非f(void*)</span></span><br><span class="line"></span><br><span class="line">f(<span class="literal">NULL</span>);      <span class="comment">// 可能无法编译，可能调用f(int)</span></span><br><span class="line">              <span class="comment">// 不可能调用 f(void*)</span></span><br><span class="line">f(nulltpr);   <span class="comment">// 调用 f(void*)</span></span><br></pre></td></tr></table></figure></p><p>另外，当你写出以下代码时， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> result = findRecord( <span class="comment">/* arguments */</span>);</span><br><span class="line"><span class="keyword">if</span>(reuslt == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一眼就能明白result是个指针，这能够增加代码的可读性。</p><h3 id="总结">总结</h3><ul><li>相较于0和NULL，优先使用nullptr</li><li>避免整数类型和指针类型之间的重载</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;条款8-优先使用nullptr而不是0和null&quot;&gt;条款8 优先使用nullptr而不是0和NULL&lt;/h2&gt;
&lt;p&gt;使用0或者NULL来初始化空指针的最大问题是0是int类型，NULL根据定义可能是int或是long，但是不会是个指针类型。编译器只是勉强将0解释为空指针。&lt;/p&gt;
&lt;p&gt;nullptr作为C++11中新增的关键字，它的优势是它不再是int类型，而是一个可以表示指向任意类型的指针的类型。nullptr在内部的类型是std::nullptr_t，这是一个模板类，内部定义了转换操作符，可以隐式的转换为所有的原始的指针类型。
    
    </summary>
    
      <category term="PL" scheme="https://natsu1211.com/categories/PL/"/>
    
      <category term="Tips" scheme="https://natsu1211.com/categories/PL/Tips/"/>
    
      <category term="Memo" scheme="https://natsu1211.com/categories/Memo/"/>
    
    
      <category term="C++" scheme="https://natsu1211.com/tags/C/"/>
    
      <category term="nullptr" scheme="https://natsu1211.com/tags/nullptr/"/>
    
  </entry>
  
  <entry>
    <title>读薄Effective Modern C++ (条款7 区分()与{}初始化)</title>
    <link href="https://natsu1211.com/modern-cpp-7.html"/>
    <id>https://natsu1211.com/modern-cpp-7.html</id>
    <published>2018-10-21T10:57:37.000Z</published>
    <updated>2019-02-11T09:51:01.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="条款7-区分与初始化">条款7 区分()与{}初始化</h2><p>c++11新增了使用{}进行初始化的统一初始化语法， 与c++98的()并存，应该使用哪种初始化常常让初学者困惑，因此有必要弄清楚它们之间的区别。 <a id="more"></a> 首先，初始化一个变量一般有4种方法， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">x</span><span class="params">(<span class="number">0</span>)</span></span>;     <span class="comment">// ()初始化</span></span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;    <span class="comment">// =初始化</span></span><br><span class="line"><span class="keyword">int</span> z&#123;<span class="number">0</span>&#125;;     <span class="comment">// &#123;&#125;初始化</span></span><br><span class="line"><span class="keyword">int</span> z = &#123;<span class="number">0</span>&#125;;  <span class="comment">// =&#123;&#125;初始化，可以认为和&#123;&#125;没有区别</span></span><br></pre></td></tr></table></figure></p><p>统一初始化可以用来直接初始化std容器，原子变量，非静态类成员变量，这些都是()初始化做不到的。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span> &#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::atomic&lt;<span class="keyword">int</span>&gt; ai1&#123; <span class="number">0</span> &#125;; <span class="comment">//没问题</span></span><br><span class="line"><span class="built_in">std</span>::atomic&lt;<span class="keyword">int</span>&gt; ai2(<span class="number">0</span>);   <span class="comment">//没问题</span></span><br><span class="line"><span class="built_in">std</span>::atomic&lt;<span class="keyword">int</span>&gt; ai3 = <span class="number">0</span>;  <span class="comment">//错误！</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x&#123; <span class="number">0</span> &#125;; <span class="comment">//没问题</span></span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">0</span>;  <span class="comment">//没问题</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">z</span><span class="params">(<span class="number">0</span>)</span></span>;   <span class="comment">//错误！</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>另外，统一初始化可以避免()初始化的一些问题。</p><p>能够避免类型截断， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> x, y, z;</span><br><span class="line"><span class="keyword">int</span> sum1&#123; x + y + z &#125;; <span class="comment">// error!</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum2</span><span class="params">(x + y + z)</span></span>; <span class="comment">// okay (截断为int)</span></span><br><span class="line"><span class="keyword">int</span> sum3 = x + y + z; <span class="comment">// okay</span></span><br></pre></td></tr></table></figure></p><p>还能够避免most vexing parse（能够解释为函数声明的表达式就认为它是函数声明）， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Widget <span class="title">w1</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//调用Widget的构造函数，参数为10</span></span><br><span class="line"><span class="function">Widget <span class="title">w2</span><span class="params">()</span></span>;   <span class="comment">//most vexing parse, 解释为函数声明！</span></span><br><span class="line">Widget w3&#123;&#125;;   <span class="comment">//调用Widget的无参构造函数</span></span><br></pre></td></tr></table></figure></p><p>但是统一初始化也有其自身的缺点，因为{}本质上是std::initializer_list，在某些场合会产生让人预想不到的结果，比如Item2中介绍的模板类型推导中关于std::initializer_list的问题。<br>另外，如果定义了接受std::initializer_list类型的构造函数，编译器在做重载决议时会尽量的将{}决议到那个构造函数上，即使有其他看起来类型更为匹配的构造函数。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Widget(<span class="keyword">int</span> i, <span class="keyword">bool</span> b);</span><br><span class="line">  Widget(<span class="keyword">int</span> i, <span class="keyword">double</span> d);</span><br><span class="line">  Widget(<span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;<span class="keyword">long</span> <span class="keyword">double</span>&gt; il); <span class="comment">//新增</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Widget <span class="title">w1</span><span class="params">(<span class="number">10</span>, <span class="literal">true</span>)</span></span>; <span class="comment">//调用第一个构造函数</span></span><br><span class="line">Widget w2&#123;<span class="number">10</span>, <span class="literal">true</span>&#125;; <span class="comment">//调用第三个构造函数，10和true被转换为long double</span></span><br><span class="line"><span class="function">Widget <span class="title">w3</span><span class="params">(<span class="number">10</span>, <span class="number">5.0</span>)</span></span>;  <span class="comment">//调用第二个构造函数</span></span><br><span class="line">Widget w4&#123;<span class="number">10</span>, <span class="number">5.0</span>&#125;;  <span class="comment">//调用第三个构造函数，10和5.0被转换为long double</span></span><br></pre></td></tr></table></figure></p><p>更令人吃惊的是看似为拷贝和移动构造的初始化，也会被那个std::initializer_list版本的构造函数给“劫持”。</p><p>但是如果没有到std::initializer<t>中类型T的转换，则会被重载为正常的版本， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">     Widget(<span class="keyword">int</span> i, <span class="keyword">bool</span> b);               <span class="comment">// as before</span></span><br><span class="line">     Widget(<span class="keyword">int</span> i, <span class="keyword">double</span> d);             <span class="comment">// as before</span></span><br><span class="line">     Widget(<span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; il);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Widget <span class="title">w1</span><span class="params">(<span class="number">10</span>, <span class="literal">true</span>)</span></span>; <span class="comment">//调用第一个构造函数</span></span><br><span class="line">Widget w2&#123;<span class="number">10</span>, <span class="literal">true</span>&#125;; <span class="comment">//调用第一个构造函数，10和true无法转换为std::string</span></span><br><span class="line"><span class="function">Widget <span class="title">w3</span><span class="params">(<span class="number">10</span>, <span class="number">5.0</span>)</span></span>;  <span class="comment">//调用第二个构造函数</span></span><br><span class="line">Widget w4&#123;<span class="number">10</span>, <span class="number">5.0</span>&#125;;  <span class="comment">//调用第二个构造函数，10和5.0无法转换为std::string</span></span><br></pre></td></tr></table></figure></t></p><p>构造函数没有参数的情况下， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Widget();</span><br><span class="line">  Widget(<span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;<span class="keyword">int</span>&gt; il);</span><br><span class="line">  ... </span><br><span class="line">&#125;;</span><br><span class="line">Widget w1;     <span class="comment">//无参构造函数</span></span><br><span class="line">Widget w2&#123;&#125;;   <span class="comment">//无参构造函数</span></span><br><span class="line"><span class="function">Widget <span class="title">w3</span><span class="params">()</span></span>;   <span class="comment">//most vexing parse</span></span><br><span class="line"><span class="function">Widget <span class="title">w4</span><span class="params">(&#123;&#125;)</span></span>; <span class="comment">//std::initializer_list&lt;int&gt;版本</span></span><br><span class="line">Widget w5&#123;&#123;&#125;&#125;; <span class="comment">//std::initializer_list&lt;int&gt;版本</span></span><br></pre></td></tr></table></figure></p><p>有时，对()和{}初始化的选择会产生截然不同的结果，比如std::vector， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1(<span class="number">10</span>, <span class="number">20</span>); <span class="comment">// 含有10个元素，值都为20</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2&#123;<span class="number">10</span>, <span class="number">20</span>&#125;; <span class="comment">// 含有2个元素，值为10，20</span></span><br></pre></td></tr></table></figure></p><p>这是一个典型的设计失误，容易造成用户的误用。类的设计者应当尽量让()与{}初始化表现的一致。这也强烈的暗示我们，没有充分的理由，不要为类添加接受std::initializer_list的构造函数。</p><p>作为类的用户，我们应当坚持一种初始化的方法，只在()和{}表现不同的时候选择正确的初始化。而作为类的作者，特别是需要在泛型类中初始化T的局部变量的时候，没有绝对正确的做法，因为没有办法知道T的具体类型。</p><h3 id="总结">总结</h3><ul><li>统一初始化是适用范围最广的初始化语法，它能够避免类型截断和most vertexing parse</li><li>在构造函数的重载决议时，{}会匹配到std::initializer_list参数，即使有其它看起来更为匹配的构造函数</li><li>在模板类中选择一种初始化方法不是一件简单的事</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;条款7-区分与初始化&quot;&gt;条款7 区分()与{}初始化&lt;/h2&gt;
&lt;p&gt;c++11新增了使用{}进行初始化的统一初始化语法， 与c++98的()并存，应该使用哪种初始化常常让初学者困惑，因此有必要弄清楚它们之间的区别。
    
    </summary>
    
      <category term="PL" scheme="https://natsu1211.com/categories/PL/"/>
    
      <category term="Tips" scheme="https://natsu1211.com/categories/PL/Tips/"/>
    
      <category term="Memo" scheme="https://natsu1211.com/categories/Memo/"/>
    
    
      <category term="C++" scheme="https://natsu1211.com/tags/C/"/>
    
      <category term="initializer_list" scheme="https://natsu1211.com/tags/initializer-list/"/>
    
  </entry>
  
  <entry>
    <title>读薄Effective Modern C++ (条款6 当auto推导出非预期类型时应当使用显式的类型初始化)</title>
    <link href="https://natsu1211.com/modern-cpp-6.html"/>
    <id>https://natsu1211.com/modern-cpp-6.html</id>
    <published>2018-10-21T08:59:29.000Z</published>
    <updated>2019-02-11T10:10:07.178Z</updated>
    
    <content type="html"><![CDATA[<h2 id="条款6-当auto推导出非预期类型时应当使用显式的类型初始化">条款6 当auto推导出非预期类型时应当使用显式的类型初始化</h2><p>使用auto声明来接受一个返回代理类型的表达式，往往会偏离我们的意图。<br><a id="more"></a> 例如假设有一个函数接受一个Widget返回一个std::vector<bool>，其中每个bool表征Widget是否接受一个特定的特性： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; features(<span class="keyword">const</span> Widget&amp; w);</span><br></pre></td></tr></table></figure></bool></p><p>进一步的，假设第五个bit表示Widget是否有高优先级。我们可以这样写代码： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Widget w;</span><br><span class="line">…</span><br><span class="line"><span class="keyword">bool</span> highPriority = features(w)[<span class="number">5</span>];         <span class="comment">// w是不是高优先级的？</span></span><br><span class="line">…</span><br><span class="line">processWidget(w, highPriority);             <span class="comment">// 配合优先级处理w</span></span><br></pre></td></tr></table></figure></p><p>但是，如果写成 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> highPriority = features(w)[<span class="number">5</span>];         <span class="comment">// w是不是高优先级的？</span></span><br></pre></td></tr></table></figure></p><p>就会出现问题，此时highPriority的类型并不是<code>bool</code>，而是<code>std::vector&lt;bool&gt;::reference</code>。之前的代码能够工作是由于存在<code>std::vector&lt;bool&gt;::reference</code>到<code>bool</code>的隐式转换。</p><p>也就是说，我们要避免使用下面的代码的形式： <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">auto someVar = expression of <span class="string">"invisible"</span><span class="built_in"> proxy </span>class type;</span><br></pre></td></tr></table></figure></p><p>这种时候应该做一个显式的类型转换。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> highPriority = <span class="keyword">static_cast</span>&lt;<span class="keyword">bool</span>&gt;(features(w)[<span class="number">5</span>]);</span><br></pre></td></tr></table></figure></p><h3 id="总结">总结</h3><ul><li>代理类型会导致auto推导出错误的类型<br></li><li>显式的强制类型转换能够使auto推导出期望的类型</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;条款6-当auto推导出非预期类型时应当使用显式的类型初始化&quot;&gt;条款6 当auto推导出非预期类型时应当使用显式的类型初始化&lt;/h2&gt;
&lt;p&gt;使用auto声明来接受一个返回代理类型的表达式，往往会偏离我们的意图。&lt;br&gt;
    
    </summary>
    
      <category term="PL" scheme="https://natsu1211.com/categories/PL/"/>
    
      <category term="Tips" scheme="https://natsu1211.com/categories/PL/Tips/"/>
    
      <category term="Memo" scheme="https://natsu1211.com/categories/Memo/"/>
    
    
      <category term="C++" scheme="https://natsu1211.com/tags/C/"/>
    
      <category term="Type inference" scheme="https://natsu1211.com/tags/Type-inference/"/>
    
  </entry>
  
  <entry>
    <title>读薄Effective Modern C++ (条款5 优先使用auto而非显式类型声明)</title>
    <link href="https://natsu1211.com/modern-cpp-5.html"/>
    <id>https://natsu1211.com/modern-cpp-5.html</id>
    <published>2018-10-20T10:37:28.000Z</published>
    <updated>2019-02-11T10:10:00.955Z</updated>
    
    <content type="html"><![CDATA[<h2 id="条款5-优先使用auto而非显式类型声明-p37---p42">条款5 优先使用auto而非显式类型声明 (p37 - p42)</h2><p>比起显式声明，auto声明有几点优势。</p><ol type="1"><li>能够避免局部变量未初始化的问题 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x1;                   <span class="comment">// potentially uninitialized</span></span><br><span class="line"><span class="keyword">auto</span> x2;                  <span class="comment">// error! initializer required</span></span><br><span class="line"><span class="keyword">auto</span> x3 = <span class="number">0</span>;              <span class="comment">// fine, x's value is well-defined</span></span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="2" type="1"><li>可以表示无法显式写出的类型（只有编译器知道的类型） <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> dereUPLess =                           <span class="comment">// comparison func.</span></span><br><span class="line">    [](<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Widget&gt;&amp; p1,   <span class="comment">// for Widgets</span></span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Widget&gt;&amp; p2)  <span class="comment">// pointed to by</span></span><br><span class="line">    &#123; <span class="keyword">return</span> *p1 &lt; *p2&#125;;                    <span class="comment">// std::unique_ptrs</span></span><br></pre></td></tr></table></figure></li></ol><p>c++14中可以在lambda的参数中使用auto，使得代码更加简洁。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> derefLess =                            <span class="comment">// C++14 comparison</span></span><br><span class="line">[](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p1,                          <span class="comment">// function for</span></span><br><span class="line">   <span class="keyword">const</span> <span class="keyword">auto</span>&amp; p2)                          <span class="comment">// values pointed</span></span><br><span class="line">&#123; <span class="keyword">return</span> *p1 &lt; *p2; &#125;;</span><br></pre></td></tr></table></figure></p><p>另外，使用auto来保存lambda表达式，比使用std::function更加节省内存，调用效率也更加的高。</p><ol start="3" type="1"><li>可以避免类型截断 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">unsigned</span> sz = v.size();</span><br></pre></td></tr></table></figure></li></ol><p>sz的类型实际上不是unsigned，而是std::vector<int>::size_type。这在64位的系统上可能会产生问题，应为unsinged是32位的。</int></p><ol start="4" type="1"><li>更加易于重构 当变量或返回值使用auto的地方无需任何对应。</li></ol><p>auto会使得类型声明不是那么一目了然和，这是很多人犹豫使用auto的原因，但是IDE得辅助能帮我们缓解这些问题。 另外还有一些auto无法做出正确推导的情况。<br>auto的使用并不是强制的，如果最终觉得显式声明更加易读可维护，可以继续使用传统的显式声明，但是要记住auto的这些优势来做出选择。</p><h3 id="总结">总结</h3><ul><li>auto变量一定要被初始化，并且对由于类型不匹配引起的兼容和效率问题有免疫力，可以简单代码重构，一般会比显式的声明类型敲击更少的键盘</li><li>auto变量也受限于条款2和条款6中描述的陷阱</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;条款5-优先使用auto而非显式类型声明-p37---p42&quot;&gt;条款5 优先使用auto而非显式类型声明 (p37 - p42)&lt;/h2&gt;
&lt;p&gt;比起显式声明，auto声明有几点优势。&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;能够避免局部变量未初始化的问题 &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x1;                   &lt;span class=&quot;comment&quot;&gt;// potentially uninitialized&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; x2;                  &lt;span class=&quot;comment&quot;&gt;// error! initializer required&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; x3 = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;              &lt;span class=&quot;comment&quot;&gt;// fine, x&#39;s value is well-defined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="PL" scheme="https://natsu1211.com/categories/PL/"/>
    
      <category term="Tips" scheme="https://natsu1211.com/categories/PL/Tips/"/>
    
      <category term="Memo" scheme="https://natsu1211.com/categories/Memo/"/>
    
    
      <category term="C++" scheme="https://natsu1211.com/tags/C/"/>
    
      <category term="Type inference" scheme="https://natsu1211.com/tags/Type-inference/"/>
    
  </entry>
  
  <entry>
    <title>读薄Effective Modern C++ (条款4 知道如何查看类型推导)</title>
    <link href="https://natsu1211.com/modern-cpp-4.html"/>
    <id>https://natsu1211.com/modern-cpp-4.html</id>
    <published>2018-10-20T08:46:42.000Z</published>
    <updated>2019-02-11T10:10:00.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="条款4-知道如何查看类型推导-p30---p35">条款4 知道如何查看类型推导 (p30 - p35)</h2><p>通常来说有三种办法，</p><h3 id="ide">IDE</h3><p>在IDE里面的代码编辑器里面当你使用光标悬停在实体之上，常常可以显示出程序实体（例如变量，参数，函数等等）的类型。需要IDE的编辑器对代码的文法有分析的能力。<br>对于简单的类型例如int，IDE里面的信息是正常的。对于更加复杂的类型的时候，从IDE里面得到的信息并不一定是有帮助性的。<br><a id="more"></a></p><h3 id="编译器诊断">编译器诊断</h3><p>一个有效的让编译器展示类型的办法就是故意制造编译问题。 首先声明一个类模板，但是并不定义这个模板： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;                    <span class="comment">// 声明TD</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TD</span>;</span>                               <span class="comment">// TD == "Type Displayer"</span></span><br></pre></td></tr></table></figure></p><p>尝试实例化这个模板会导致错误信息，因为没有模板的实现。想看变量被推导的类型，只要尝试去使用这些类型去实例化TD：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">TD&lt;<span class="keyword">decltype</span>(x)&gt; xType;                  <span class="comment">// 引起的错误</span></span><br><span class="line">TD&lt;<span class="keyword">decltype</span>(y)&gt; yType;                  <span class="comment">// 包含了x和y的类型</span></span><br></pre></td></tr></table></figure></p><p>我使用的变量名字的形式variableNameType是因为这样有利于输出的错误信息可以帮助我定位我要寻找的信息。对上面的代码，我的一个编译器输出了诊断信息，其中的一部分如下： <figure class="highlight"><table><tr><td class="code"><pre><span class="line">error: aggregate 'TD&lt;int&gt; xType' has incomplete type and cannot be defined</span><br><span class="line">error: aggregate 'TD&lt;const int *&gt; yType' has incomplete type and cannot be defined</span><br></pre></td></tr></table></figure></p><p>另一个编译器提供相同的信息，但是格式不太一样： <figure class="highlight"><table><tr><td class="code"><pre><span class="line">error: 'xType' uses undefined class 'TD&lt;int&gt;'</span><br><span class="line">error: 'yType' uses undefined class 'TD&lt;const int *&gt;'</span><br></pre></td></tr></table></figure></p><p>排除格式的区别，基本所有的编译器都会在这种代码的技术中输出有用的错误信息。</p><h3 id="运行时输出">运行时输出</h3><p>可以使用， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">typeid</span>(x).name() &lt;&lt; <span class="string">'\n'</span>; <span class="comment">// display types for</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">typeid</span>(y).name() &lt;&lt; <span class="string">'\n'</span>; <span class="comment">// x and y</span></span><br></pre></td></tr></table></figure></p><p>这是基于对类似于x或者y运算typeid可以得到一个std::type_info对象，std::type_info有一个成员函数，name可以提供一个C风格的字符串，代表了类型的名字。但是遗憾的是输出通常并不是完全可靠。<br>Boost.TypeIndex库可以得到准备的结果，我们可以写一个函数f来查看变量或函数的类型<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/type_index.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">const</span> T&amp; param)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line">    <span class="keyword">using</span> boost::typeindex::type_id_with_cvr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// show T</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"T = "</span></span><br><span class="line">         &lt;&lt; type_id_with_cvr&lt;T&gt;().pretty_name()</span><br><span class="line">         &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// show param's type</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"param = "</span></span><br><span class="line">         &lt;&lt; type_id_with_cvr&lt;<span class="keyword">decltype</span>(param)&gt;().pretty_name()</span><br><span class="line">         &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>按照以下方法使用， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Widget&gt; createVec();    <span class="comment">// 工厂方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> vw = createVec();        <span class="comment">// init vw w/factory return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!vw.empty()) &#123;</span><br><span class="line">    f(&amp;vw[<span class="number">0</span>]);                      <span class="comment">// 调用f</span></span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在GNU和Clang的编译器下面，Boost.TypeIndex输出准确的结果： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">T = Widget <span class="keyword">const</span>*</span><br><span class="line">param = Widget <span class="keyword">const</span>* <span class="keyword">const</span>&amp;</span><br></pre></td></tr></table></figure></p><p>微软的编译器实际上输出的结果是一样的： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">T = class Widget <span class="keyword">const</span> *</span><br><span class="line">param = class Widget <span class="keyword">const</span> * <span class="keyword">const</span> &amp;</span><br></pre></td></tr></table></figure></p><p>以上三种方法可以灵活使用。</p><h3 id="总结">总结</h3><ul><li>类型推导的结果常常可以通过IDE的编辑器，编译器错误输出信息和Boost.TypeIndex库的结果中得到</li><li>一些工具的结果不一定有帮助性也不一定准确，所以对C++标准的类型推导法则加以理解是很有必要的</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;条款4-知道如何查看类型推导-p30---p35&quot;&gt;条款4 知道如何查看类型推导 (p30 - p35)&lt;/h2&gt;
&lt;p&gt;通常来说有三种办法，&lt;/p&gt;
&lt;h3 id=&quot;ide&quot;&gt;IDE&lt;/h3&gt;
&lt;p&gt;在IDE里面的代码编辑器里面当你使用光标悬停在实体之上，常常可以显示出程序实体（例如变量，参数，函数等等）的类型。需要IDE的编辑器对代码的文法有分析的能力。&lt;br&gt;
对于简单的类型例如int，IDE里面的信息是正常的。对于更加复杂的类型的时候，从IDE里面得到的信息并不一定是有帮助性的。&lt;br&gt;
    
    </summary>
    
      <category term="PL" scheme="https://natsu1211.com/categories/PL/"/>
    
      <category term="Tips" scheme="https://natsu1211.com/categories/PL/Tips/"/>
    
      <category term="Memo" scheme="https://natsu1211.com/categories/Memo/"/>
    
    
      <category term="C++" scheme="https://natsu1211.com/tags/C/"/>
    
      <category term="Type inference" scheme="https://natsu1211.com/tags/Type-inference/"/>
    
  </entry>
  
</feed>
