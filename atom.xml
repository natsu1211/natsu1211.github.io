<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EverSummer</title>
  
  <subtitle>no game no life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://natsu1211.com/"/>
  <updated>2018-10-20T10:29:44.888Z</updated>
  <id>http://natsu1211.com/</id>
  
  <author>
    <name>natsu1211</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>modern-cpp-4</title>
    <link href="http://natsu1211.com/2018/10/20/modern-cpp-4/"/>
    <id>http://natsu1211.com/2018/10/20/modern-cpp-4/</id>
    <published>2018-10-20T08:46:42.000Z</published>
    <updated>2018-10-20T10:29:44.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="item4-知道如何查看类型推导-p30---p29">Item4 知道如何查看类型推导 (p30 - p29)</h2><p>通常来说有三种办法，</p><h3 id="ide">IDE</h3><p>在IDE里面的代码编辑器里面当你使用光标悬停在实体之上，常常可以显示出程序实体（例如变量，参数，函数等等）的类型。需要IDE的编辑器对代码的文法有分析的能力。<br>对于简单的类型例如int，IDE里面的信息是正常的。对于更加复杂的类型的时候，从IDE里面得到的信息并不一定是有帮助性的。<br><a id="more"></a></p><h3 id="编译器诊断">编译器诊断</h3><p>一个有效的让编译器展示类型的办法就是故意制造编译问题。 首先声明一个类模板，但是并不定义这个模板：</p><p>template<typename t=""> // 声明TD class TD; // TD == “Type Displayer” 尝试实例化这个模板会导致错误信息，因为没有模板的实现。想看变量被推导的类型，只要尝试去使用这些类型去实例化TD：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">TD&lt;<span class="keyword">decltype</span>(x)&gt; xType;                  <span class="comment">// 引起的错误</span></span><br><span class="line">TD&lt;<span class="keyword">decltype</span>(y)&gt; yType;                  <span class="comment">// 包含了x和y的类型</span></span><br></pre></td></tr></table></figure></typename></p><p>我使用的变量名字的形式variableNameType是因为这样有利于输出的错误信息可以帮助我定位我要寻找的信息。对上面的代码，我的一个编译器输出了诊断信息，其中的一部分如下： <figure class="highlight"><table><tr><td class="code"><pre><span class="line">error: aggregate 'TD&lt;int&gt; xType' has incomplete type and cannot be defined</span><br><span class="line">error: aggregate 'TD&lt;const int *&gt; yType' has incomplete type and cannot be defined</span><br></pre></td></tr></table></figure></p><p>另一个编译器提供相同的信息，但是格式不太一样： <figure class="highlight"><table><tr><td class="code"><pre><span class="line">error: 'xType' uses undefined class 'TD&lt;int&gt;'</span><br><span class="line">error: 'yType' uses undefined class 'TD&lt;const int *&gt;'</span><br></pre></td></tr></table></figure></p><p>排除格式的区别，基本所有的编译器都会在这种代码的技术中输出有用的错误信息。</p><h3 id="运行时输出">运行时输出</h3><p>可以使用， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">typeid</span>(x).name() &lt;&lt; <span class="string">'\n'</span>; <span class="comment">// display types for</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">typeid</span>(y).name() &lt;&lt; <span class="string">'\n'</span>; <span class="comment">// x and y</span></span><br></pre></td></tr></table></figure></p><p>这是基于对类似于x或者y运算typeid可以得到一个std::type_info对象，std::type_info有一个成员函数，name可以提供一个C风格的字符串，代表了类型的名字。但是遗憾的是输出通常并不是完全可靠。<br>Boost.TypeIndex库可以得到准备的结果，我们可以写一个函数f来查看变量或函数的类型<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/type_index.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">const</span> T&amp; param)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line">    <span class="keyword">using</span> boost::typeindex::type_id_with_cvr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// show T</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"T = "</span></span><br><span class="line">         &lt;&lt; type_id_with_cvr&lt;T&gt;().pretty_name()</span><br><span class="line">         &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// show param's type</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"param = "</span></span><br><span class="line">         &lt;&lt; type_id_with_cvr&lt;<span class="keyword">decltype</span>(param)&gt;().pretty_name()</span><br><span class="line">         &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>按照以下方法使用， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Widget&gt; createVec();    <span class="comment">// 工厂方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> vw = createVec();        <span class="comment">// init vw w/factory return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!vw.empty()) &#123;</span><br><span class="line">    f(&amp;vw[<span class="number">0</span>]);                      <span class="comment">// 调用f</span></span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在GNU和Clang的编译器下面，Boost.TypeIndex输出准确的结果： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">T = Widget <span class="keyword">const</span>*</span><br><span class="line">param = Widget <span class="keyword">const</span>* <span class="keyword">const</span>&amp;</span><br></pre></td></tr></table></figure></p><p>微软的编译器实际上输出的结果是一样的： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">T = class Widget <span class="keyword">const</span> *</span><br><span class="line">param = class Widget <span class="keyword">const</span> * <span class="keyword">const</span> &amp;</span><br></pre></td></tr></table></figure></p><p>以上三种方法可以灵活使用。</p><h3 id="总结">总结</h3><ul><li>类型推导的结果常常可以通过IDE的编辑器，编译器错误输出信息和Boost.TypeIndex库的结果中得到</li><li>一些工具的结果不一定有帮助性也不一定准确，所以对C++标准的类型推导法则加以理解是很有必要的</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;item4-知道如何查看类型推导-p30---p29&quot;&gt;Item4 知道如何查看类型推导 (p30 - p29)&lt;/h2&gt;
&lt;p&gt;通常来说有三种办法，&lt;/p&gt;
&lt;h3 id=&quot;ide&quot;&gt;IDE&lt;/h3&gt;
&lt;p&gt;在IDE里面的代码编辑器里面当你使用光标悬停在实体之上，常常可以显示出程序实体（例如变量，参数，函数等等）的类型。需要IDE的编辑器对代码的文法有分析的能力。&lt;br&gt;
对于简单的类型例如int，IDE里面的信息是正常的。对于更加复杂的类型的时候，从IDE里面得到的信息并不一定是有帮助性的。&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://natsu1211.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="读书笔记" scheme="http://natsu1211.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="c++" scheme="http://natsu1211.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>读薄Effective Modern C++ (Item3)</title>
    <link href="http://natsu1211.com/2018/10/19/modern-cpp-3/"/>
    <id>http://natsu1211.com/2018/10/19/modern-cpp-3/</id>
    <published>2018-10-18T15:33:48.000Z</published>
    <updated>2018-10-19T17:48:50.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="item3-理解decltype-p23---p29">Item3 理解decltype (p23 - p29)</h2><p>decltype返回一个变量名或表达式的类型。和auto推导相比，它大多数时候只是如实的返回变量或表达式的类型，但是也有一些特殊情况。 <a id="more"></a> 正常情况下，没有任何意外。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> i = <span class="number">0</span>;            <span class="comment">// decltype(i) is const int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">f</span><span class="params">(<span class="keyword">const</span> Widget&amp; w)</span></span>;    <span class="comment">// decltype(w) is const Widget&amp;</span></span><br><span class="line">                            <span class="comment">// decltype(f) is bool(const Widget&amp;)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;               <span class="comment">// decltype(Point::x) is int</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Widget w;                   <span class="comment">// decltype(w) is Widget</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (f(w)) ...               <span class="comment">// decltype(f(w)) is bool</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;        <span class="comment">// simplified version of std::vector</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vector</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">    T&amp; <span class="keyword">operator</span>[](<span class="built_in">std</span>::<span class="keyword">size_t</span> index);</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;              <span class="comment">// decltype(v) is vector&lt;int&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span>(v[<span class="number">0</span>] == <span class="number">0</span>)               <span class="comment">// decltype(v[0]) is int&amp;f</span></span><br></pre></td></tr></table></figure></p><p>decltype在我们无法显式的写出某个表达式的类型时候特别有用， 例如我们要写一个获取列表容器在某个位置上的元素的泛型函数，我们无法知道这个容器内部的元素是什么类型，c++11中，我们可以借助尾置返回语法写出以下代码， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Container, <span class="keyword">typename</span> Index&gt;    <span class="comment">// final</span></span><br><span class="line"><span class="keyword">auto</span>                                            <span class="comment">// C++11</span></span><br><span class="line">access(Container&amp;&amp; c, Index i)                  <span class="comment">// version</span></span><br><span class="line">-&gt; <span class="keyword">decltype</span>(<span class="built_in">std</span>::forward&lt;Container&gt;(c)[i]</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::forward&lt;Container&gt;(c)[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>c++14中我们可以写成， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Container, <span class="keyword">typename</span> Index&gt;</span><br><span class="line"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) access(Container&amp;&amp; c, Index i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::forward&lt;Container&gt;(c)[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代表用decltype的规则来进行类型推导。 该语法不止可以用于函数的返回类型推导，还可以用于变量的类型推导。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Widget w;</span><br><span class="line"><span class="keyword">const</span> Widget&amp; cw = w; <span class="comment">// cw的类型为const Widget&amp;</span></span><br><span class="line"><span class="keyword">auto</span> myWidget1 = cw;  <span class="comment">// auto类型推导，myWidget1的类型为Widget</span></span><br><span class="line"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) myWidget2 = cw; <span class="comment">// decltype类型推导，myWidget2的类型为const Widget&amp;</span></span><br></pre></td></tr></table></figure></p><p>需要注意的情况是，decltype会将具有类型T的左值表达式的类型推导为T&amp;， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) f1()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> x;        <span class="comment">// f1返回类型为int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) f2()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (x);     <span class="comment">// f2返回类型为int&amp;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>f2返回了一个局部变量的引用！这当然是我们不愿意看到的。</p><h3 id="总结">总结</h3><ul><li>decltype几乎总是不加修改的返回变量或表达式的类型</li><li>对于类型为T并且不是单纯变量名的左值表达式，decltype总是返回T&amp;</li><li>C++14支持decltype(auto)语法，使用decltype的规则进行类型推导</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;item3-理解decltype-p23---p29&quot;&gt;Item3 理解decltype (p23 - p29)&lt;/h2&gt;
&lt;p&gt;decltype返回一个变量名或表达式的类型。和auto推导相比，它大多数时候只是如实的返回变量或表达式的类型，但是也有一些特殊情况。
    
    </summary>
    
      <category term="编程语言" scheme="http://natsu1211.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="读书笔记" scheme="http://natsu1211.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="c++" scheme="http://natsu1211.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>读薄Effective Modern C++ (Item2)</title>
    <link href="http://natsu1211.com/2018/08/29/modern-cpp-2/"/>
    <id>http://natsu1211.com/2018/08/29/modern-cpp-2/</id>
    <published>2018-08-28T16:07:46.000Z</published>
    <updated>2018-08-29T16:23:35.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="item2-理解auto类型推导p18-p23">Item2 理解auto类型推导（p18-p23）</h2><p>auto类型推导的规则本质就是模板类型推导，除了一种特殊情况。 auto类型推导和模板类型推导之间存在着直接的对应关系。可以想象编译器为auto语句生成了对应的模板函数，并采用Item1介绍的规则对类型进行推导。</p><a id="more"></a><p>具体的对应规则如下， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> x = <span class="number">27</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> cx = x;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span>&amp; rx = x;</span><br></pre></td></tr></table></figure></p><p>对应 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;                <span class="comment">// 推导x的类型的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func_for_x</span><span class="params">(T param)</span></span>;           <span class="comment">// 概念上的模板</span></span><br><span class="line"></span><br><span class="line">func_for_x(<span class="number">27</span>);                     <span class="comment">// 概念上的调用：</span></span><br><span class="line">                                    <span class="comment">// param的类型就是x的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func_for_cx</span><span class="params">(<span class="keyword">const</span> T param)</span></span>;    <span class="comment">// 推导cx的概念上的模板</span></span><br><span class="line"></span><br><span class="line">func_for_cx(x);                     <span class="comment">// 概念调用：param的推导类型就是cx的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func_for_rx</span><span class="params">(<span class="keyword">const</span> T&amp; param)</span></span>;   <span class="comment">// 推导rx概念上的模板</span></span><br><span class="line"></span><br><span class="line">func_for_rx(x);                     <span class="comment">// 概念调用：param的推导类型就是rx的类型</span></span><br></pre></td></tr></table></figure></p><p>特殊情况：<br>使用C++11新加入的统一初始化时， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> x3 = &#123;<span class="number">27</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> x4&#123; <span class="number">27</span> &#125;;</span><br></pre></td></tr></table></figure></p><p>相当于声明了一个类型为std::intializer_list<int>的变量，这个变量包含了一个单一的元素27。</int></p><p>对待花括号初始化的行为是auto唯一和模板类型推导不一样的地方。当auto声明变量被使用一对花括号初始化，推导的类型是std::intializer_list的一个实例。但是如果相同的初始化递给相同的模板，类型推导会失败，代码不能编译。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> x = &#123; <span class="number">11</span>, <span class="number">23</span>, <span class="number">9</span> &#125;;             <span class="comment">// x的类型是</span></span><br><span class="line">                                    <span class="comment">// std::initializer_list&lt;int&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;                <span class="comment">// 和x的声明等价的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T param)</span></span>;                    <span class="comment">// 模板</span></span><br><span class="line"></span><br><span class="line">f(&#123; <span class="number">11</span>, <span class="number">23</span>, <span class="number">9</span> &#125;);                   <span class="comment">// 错误的！没办法推导T的类型</span></span><br></pre></td></tr></table></figure></p><p>但是，如果你明确模板的param的类型是一个不知道T类型的std::initializer_list<t>： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;T&gt; initList)</span></span>;</span><br><span class="line"></span><br><span class="line">f(&#123; <span class="number">11</span>, <span class="number">23</span>, <span class="number">9</span> &#125;);                   <span class="comment">// T被推导成int，initList的</span></span><br><span class="line">                                    <span class="comment">// 类型是std::initializer_list&lt;int&gt;</span></span><br></pre></td></tr></table></figure></t></p><p>所以auto和模板类型推导的本质区别就是auto假设花括号初始化代表的是std::initializer_list，但是模板类型推导却不是。</p><p>对于C++11，这就是auto类型推导规则的全部了。但是对于C++14来说，故事还要继续。C++14允许auto表示推导的函数返回值（参看Item3），而且C++14的lambda可能会在参数声明里面使用auto。但是，这里的auto的规则是模板的类型推导，而不是auto的类型推导。所以一个使用auto声明的返回值的函数，返回一个花括号初始化就无法编译。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">createInitList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;             <span class="comment">// 编译错误：不能推导出&#123; 1, 2, 3 &#125;的类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在C++14的lambda里面，当auto用在参数类型声明的时候也是如此：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">auto</span> resetV =  [&amp;v](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; newValue) &#123; v = newValue; &#125;    <span class="comment">// C++14</span></span><br><span class="line">resetV(&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;);                <span class="comment">// 编译错误，不能推导出&#123; 1, 2, 3 &#125;的类型</span></span><br></pre></td></tr></table></figure><h4 id="总结">总结</h4><ul><li>auto类型推导通常和模板类型推导类似，但是auto类型推导假定花括号初始化代表的类型是std::initializer_list，但是模板类型推导却不是这样。<br></li><li>auto在函数返回值或者lambda参数里面执行模板的类型推导，而不是通常意义的auto类型推导</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;item2-理解auto类型推导p18-p23&quot;&gt;Item2 理解auto类型推导（p18-p23）&lt;/h2&gt;
&lt;p&gt;auto类型推导的规则本质就是模板类型推导，除了一种特殊情况。 auto类型推导和模板类型推导之间存在着直接的对应关系。可以想象编译器为auto语句生成了对应的模板函数，并采用Item1介绍的规则对类型进行推导。&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://natsu1211.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="读书笔记" scheme="http://natsu1211.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="c++" scheme="http://natsu1211.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>读薄Effective Modern C++ (Item1)</title>
    <link href="http://natsu1211.com/2018/08/24/modern_cpp_1/"/>
    <id>http://natsu1211.com/2018/08/24/modern_cpp_1/</id>
    <published>2018-08-23T16:27:34.000Z</published>
    <updated>2018-10-18T16:50:34.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="item1-理解模板类型推导p9-p18">Item1 理解模板类型推导（p9-p18）</h2><p>C++98中，类型推导只发生在函数模板中。C++11中类型推导还会发生在大多数auto关键字和decltype表达式出现的地方，C++14还会发生在decltype(auto)。如果对类型推导没有深刻的理解，很难写出高效率的现代C++代码。</p><a id="more"></a><p>对于以下函数模板声明（伪代码）， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(ParamType param)</span></span>;</span><br></pre></td></tr></table></figure></p><p>以及它的调用 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">f(expr)</span><br></pre></td></tr></table></figure></p><p>在编译时，编译器使用传递来的expr推导出T和ParamType，通常T和ParamType不是一个类型，因为ParamType通常会带上类型修饰符。例如 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">const</span> T&amp; param)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">f(x);</span><br><span class="line"><span class="comment">// T is int, ParamType is const int&amp;</span></span><br></pre></td></tr></table></figure></p><p>T的类型由expr和ParamType共同来决定，有3种可能，<br>1. ParamType是一个指针或者引用，但是不是一个通用引用（Universal Reference）<br>2. ParamType是一个通用引用<br>3. ParamType不是指针也不是引用</p><p>对于1，如果expr的类型是个引用，忽略引用的部分。然后利用expr的类型和ParamType对比去判断T的类型。<br>例： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T&amp; param)</span></span>;           <span class="comment">// param是一个引用类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">27</span>;                 <span class="comment">// x是一个int</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> cx = x;           <span class="comment">// cx是一个const int</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; rx = x;          <span class="comment">// rx是const int的引用</span></span><br><span class="line"></span><br><span class="line">f(x);                       <span class="comment">// T是int，param的类型时int&amp;</span></span><br><span class="line"></span><br><span class="line">f(cx);                      <span class="comment">// T是const int，</span></span><br><span class="line">                            <span class="comment">// param的类型是const int&amp;</span></span><br><span class="line">f(rx);                      <span class="comment">// T是const int</span></span><br><span class="line">                            <span class="comment">// param的类型时const int&amp;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T* param)</span></span>;           <span class="comment">// param是一个指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">27</span>;                 <span class="comment">// 和之前一样</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *px = &amp;x;         <span class="comment">// px是一个指向const int x的指针</span></span><br><span class="line"></span><br><span class="line">f(&amp;x);                      <span class="comment">// T是int，param的类型是int*</span></span><br><span class="line"></span><br><span class="line">f(px);                      <span class="comment">// T是const int</span></span><br><span class="line">                            <span class="comment">// param的类型时const int*</span></span><br></pre></td></tr></table></figure><p>对于2，如果expr是一个左值，T和ParamType都会被推导成左值引用。这是模板类型T被推导成一个引用的唯一情况。如果expr是一个右值，那么就执行“普通”的法则（第一种情况）。Item23和Item24会对这种情况进行详尽的解释。<br>例： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T&amp;&amp; param)</span></span>;          <span class="comment">// param现在是一个通用的引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">27</span>;                 <span class="comment">// 和之前一样</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> cx = x;           <span class="comment">// 和之前一样</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; rx = x;          <span class="comment">// 和之前一样</span></span><br><span class="line"></span><br><span class="line">f(x);                       <span class="comment">// x是左值，所以T是int&amp;</span></span><br><span class="line">                            <span class="comment">// param的类型也是int&amp;</span></span><br><span class="line"></span><br><span class="line">f(cx);                      <span class="comment">// cx是左值，所以T是const int&amp;</span></span><br><span class="line">                            <span class="comment">// param的类型也是const int&amp;</span></span><br><span class="line"></span><br><span class="line">f(rx);                      <span class="comment">// rx是左值，所以T是const int&amp;</span></span><br><span class="line">                            <span class="comment">// param的类型也是const int&amp;</span></span><br><span class="line"></span><br><span class="line">f(<span class="number">27</span>);                      <span class="comment">// 27是右值，所以T是int</span></span><br><span class="line">                            <span class="comment">// param的类型是int&amp;&amp;</span></span><br></pre></td></tr></table></figure></p><p>对于3，param是pass-by-value的，这意味着param是的一份全新的拷贝。和之前一样，如果expr的类型是个引用，将会忽略引用的部分。接下来const，volatile修饰符也要忽略掉。这是有道理的，因为传递过来的参数不能修改不代表它的拷贝不能被修改。<br>例： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">27</span>;                 <span class="comment">// 和之前一样</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> cx = x;           <span class="comment">// 和之前一样</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; rx = x;          <span class="comment">// 和之前一样</span></span><br><span class="line"></span><br><span class="line">f(x);                       <span class="comment">// T和param的类型都是int</span></span><br><span class="line"></span><br><span class="line">f(cx);                      <span class="comment">// T和param的类型也都是int</span></span><br><span class="line"></span><br><span class="line">f(rx);                      <span class="comment">// T和param的类型还都是int</span></span><br></pre></td></tr></table></figure></p><h3 id="注意事项">注意事项</h3><h4 id="数组作为参数">数组作为参数</h4><p>通常情况下数组类型会退化为指针类型，但是在模板函数的参数是数组的引用的时候情况就不同了。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T&amp; param)</span></span>;                   <span class="comment">// 引用参数的模板</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> name[] = <span class="string">"J. P. Briggs"</span>;</span><br><span class="line">f(name);                            <span class="comment">// 传递数组给f</span></span><br></pre></td></tr></table></figure></p><p>T最后推导出来的实际的类型就是数组。类型推导包括了数组的长度，所以在这个例子里面，T被推导成了const char [13]，函数f的参数（数组的引用）被推导成了const char (&amp;)[13]。</p><h4 id="函数作为参数">函数作为参数</h4><p>函数也会退化为函数指针， <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">someFunc</span><span class="params">(<span class="keyword">int</span>， <span class="keyword">double</span>)</span></span>;    <span class="comment">// someFunc是一个函数</span></span><br><span class="line">                                <span class="comment">// 类型是void(int, double)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">(T param)</span></span>;               <span class="comment">// 在f1中 参数直接按值传递</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">(T&amp; param)</span></span>;              <span class="comment">// 在f2中 参数是按照引用传递</span></span><br><span class="line"></span><br><span class="line">f1(someFunc);                   <span class="comment">// param被推导成函数指针</span></span><br><span class="line">                                <span class="comment">// 类型是void(*)(int, double)</span></span><br><span class="line"></span><br><span class="line">f2(someFunc);                   <span class="comment">// param被推导成函数引用</span></span><br><span class="line">                                <span class="comment">// 类型是void(&amp;)(int, double)</span></span><br></pre></td></tr></table></figure></p><h3 id="总结">总结</h3><ul><li>在模板类型推导的时候，有引用特性的参数的引用特性会被忽略</li><li>在推导通用引用参数的时候，左值会被特殊处理</li><li>在推导按值传递的参数时候，const和volatile参数会被视为非const和非volatile</li><li>在模板类型推导的时候，参数如果是数组或者函数名称，他们会被退化成指针，除非是用在初始化引用类型</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;item1-理解模板类型推导p9-p18&quot;&gt;Item1 理解模板类型推导（p9-p18）&lt;/h2&gt;
&lt;p&gt;C++98中，类型推导只发生在函数模板中。C++11中类型推导还会发生在大多数auto关键字和decltype表达式出现的地方，C++14还会发生在decltype(auto)。如果对类型推导没有深刻的理解，很难写出高效率的现代C++代码。&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://natsu1211.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="读书笔记" scheme="http://natsu1211.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="c++" scheme="http://natsu1211.com/tags/c/"/>
    
  </entry>
  
</feed>
